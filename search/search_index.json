{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"lab1 - lab1 lab2 - lab2 lab3 - lab3 parctice3 - parctice3","title":"Home"},{"location":"#lab1","text":"- lab1","title":"lab1"},{"location":"#lab2","text":"- lab2","title":"lab2"},{"location":"#lab3","text":"- lab3","title":"lab3"},{"location":"#parctice3","text":"- parctice3","title":"parctice3"},{"location":"lab1/","text":"\u0417\u0430\u0434\u0430\u0447\u0430 \u21161 \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0443\u044e \u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u043e\u0442\u0441\u044b\u043b\u0430\u0435\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u201cHello, server\u201d. \u0421\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u043e\u0442\u0440\u0430\u0437\u0438\u0442\u044c\u0441\u044f \u043d\u0430 \u0441\u0435\u0440\u0432\u0435\u0440\u0435. \u0421\u0435\u0440\u0432\u0435\u0440 \u0432 \u043e\u0442\u0432\u0435\u0442 \u043e\u0442\u0441\u044b\u043b\u0430\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u00abHello, client\u00bb. \u0421\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u043e\u0442\u043e\u0431\u0440\u0430\u0437\u0438\u0442\u044c\u0441\u044f \u0443 \u043a\u043b\u0438\u0435\u043d\u0442\u0430. \u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 socket. \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b\u0430 UDP. \u0420\u0435\u0448\u0435\u043d\u0438\u0435 \u0421\u0435\u0440\u0432\u0435\u0440 import socket server_socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM) server_address = ('localhost', 12345) server_socket.bind(server_address) print('\u0421\u0435\u0440\u0432\u0435\u0440 \u0437\u0430\u043f\u0443\u0449\u0435\u043d \u0438 \u043e\u0436\u0438\u0434\u0430\u0435\u0442 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u043e\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0430...') while True: data, client_address = server_socket.recvfrom(1024) message = data.decode('utf-8') print('\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u043e \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u043e\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0430:', message) response = 'Hello, client' server_socket.sendto(response.encode('utf-8'), client_address) \u041a\u043b\u0438\u0435\u043d\u0442 import socket client_socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM) server_address = ('localhost', 12345) message = 'Hello, server' client_socket.sendto(message.encode('utf-8'), server_address) response, _ = client_socket.recvfrom(1024) response_message = response.decode('utf-8') print('\u041f\u043e\u043b\u0443\u0447\u0435\u043d \u043e\u0442\u0432\u0435\u0442 \u043e\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u0430:', response_message) client_socket.close() \u041f\u0440\u0438\u043c\u0435\u0440 \u0440\u0430\u0431\u043e\u0442\u044b \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u0421\u0435\u0440\u0432\u0435\u0440\u043d\u0430\u044f \u0447\u0430\u0441\u0442\u044c \u041a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0430\u044f \u0447\u0430\u0441\u0442\u044c \u0417\u0430\u0434\u0430\u0447\u0430 \u21162 \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0443\u044e \u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u0437\u0430\u043f\u0440\u0430\u0448\u0438\u0432\u0430\u0435\u0442 \u0443 \u0441\u0435\u0440\u0432\u0435\u0440\u0430 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043c\u0430\u0442\u0435\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438, \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u0432\u0432\u043e\u0434\u044f\u0442\u0441\u044f \u0441 \u043a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440\u044b. \u0421\u0435\u0440\u0432\u0435\u0440 \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443. \u041c\u043e\u0439 \u0432\u0430\u0440\u0438\u0430\u043d\u0442, \u0441\u043e\u0433\u043b\u0430\u0441\u043d\u043e \u0441\u043f\u0438\u0441\u043a\u0443 \u0433\u0440\u0443\u043f\u043f\u044b, \u2013 \u0442\u0435\u043e\u0440\u0435\u043c\u0430 \u041f\u0438\u0444\u0430\u0433\u043e\u0440\u0430. \u0420\u0435\u0448\u0435\u043d\u0438\u0435 \u0421\u0435\u0440\u0432\u0435\u0440 import socket server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM) server_address = ('localhost', 12345) server_socket.bind(server_address) server_socket.listen(1) print('\u0421\u0435\u0440\u0432\u0435\u0440 \u0437\u0430\u043f\u0443\u0449\u0435\u043d \u0438 \u043e\u0436\u0438\u0434\u0430\u0435\u0442 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u043a\u043b\u0438\u0435\u043d\u0442\u0430...') while True: client_socket, client_address = server_socket.accept() print('\u041f\u043e\u0434\u043a\u043b\u044e\u0447\u0438\u043b\u0441\u044f \u043a\u043b\u0438\u0435\u043d\u0442:', client_address) base = float(client_socket.recv(1024).decode('utf-8')) height = float(client_socket.recv(1024).decode('utf-8')) area = base * height client_socket.send(str(area).encode('utf-8')) client_socket.close() \u041a\u043b\u0438\u0435\u043d\u0442 import socket client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM) server_address = ('localhost', 12345) client_socket.connect(server_address) print('\u041f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u043e \u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0443:', server_address) base = float(input('\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043e\u0441\u043d\u043e\u0432\u0430\u043d\u0438\u044f: ')) height = float(input('\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0432\u044b\u0441\u043e\u0442\u044b: ')) if base < 0 or height < 0: print('\u0412\u044b\u0441\u043e\u0442\u0430 \u0438 \u0434\u043b\u0438\u043d\u0430 \u043d\u0435 \u043c\u043e\u0433\u0443\u0442 \u0431\u044b\u0442\u044c \u043e\u0442\u0440\u0438\u0446\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u043c\u0438.') client_socket.close() exit() client_socket.send(str(base).encode('utf-8')) client_socket.send(str(height).encode('utf-8')) result = client_socket.recv(1024).decode('utf-8') print('\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438:', result) client_socket.close() \u0414\u0435\u043c\u043e\u043d\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u041a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0430\u044f \u0447\u0430\u0441\u0442\u044c \u041a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0430\u044f \u0447\u0430\u0441\u0442\u044c \u0417\u0430\u0434\u0430\u0447\u0430 \u21163 \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0430\u0435\u0442\u0441\u044f \u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0443. \u0412 \u043e\u0442\u0432\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 http-\u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0435\u0435 html-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443, \u043a\u043e\u0442\u043e\u0440\u0443\u044e \u0441\u0435\u0440\u0432\u0435\u0440 \u043f\u043e\u0434\u0433\u0440\u0443\u0436\u0430\u0435\u0442 \u0438\u0437 \u0444\u0430\u0439\u043b\u0430 index.html. \u0420\u0435\u0448\u0435\u043d\u0438\u0435 \u0421\u0435\u0440\u0432\u0435\u0440 import socket server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM) server_address = ('localhost', 80) server_socket.bind(server_address) server_socket.listen(1) print('\u0421\u0435\u0440\u0432\u0435\u0440 \u0437\u0430\u043f\u0443\u0449\u0435\u043d \u0438 \u043e\u0436\u0438\u0434\u0430\u0435\u0442 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u043a\u043b\u0438\u0435\u043d\u0442\u0430...') while True: client_socket, client_address = server_socket.accept() print('\u041f\u043e\u0434\u043a\u043b\u044e\u0447\u0438\u043b\u0441\u044f \u043a\u043b\u0438\u0435\u043d\u0442:', client_address) with open('index.html', 'r') as file: html_content = file.read() http_response = 'HTTP/1.1 200 OK\\r\\n' http_response += 'Content-Type: text/html\\r\\n' http_response += '\\r\\n' http_response += html_content client_socket.send(http_response.encode('utf-8')) client_socket.close() \u0414\u0435\u043c\u043e\u043d\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u041f\u0440\u0438 \u043f\u0435\u0440\u0435\u0445\u043e\u0434\u0435 \u043f\u043e \u043d\u0443\u0436\u043d\u043e\u043c\u0443 \u0441\u043e\u043a\u0435\u0442\u0443 \u0432 \u0431\u0440\u0430\u0443\u0437\u0435\u0440\u0435 \u0432\u0438\u0434\u0438\u043c html \u0417\u0430\u0434\u0430\u0447\u0430 \u21164 \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0434\u0432\u0443\u0445\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0438\u043b\u0438 \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0447\u0430\u0442. \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0433\u043e \u0447\u0430\u0442\u0430 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0431\u0430\u043b\u043b\u043e\u0432. \u0420\u0435\u0448\u0435\u043d\u0438\u0435 \u0421\u0435\u0440\u0432\u0435\u0440 import threading import socket def handle_client(client_socket, client_name): while True: try: message = client_socket.recv(1024).decode('utf-8') if message: print(f'{client_name}: {message}') broadcast_message(client_name, message) except: print(f'\u041f\u043e\u0442\u0435\u0440\u044f\u043d\u043e \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0435 \u0441 \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u043c {client_name}') client_socket.close() break def broadcast_message(sender_name, message): for client_socket, name in CLIENTS: if name != sender_name: try: client_socket.send(f'{sender_name}: {message}'.encode('utf-8')) except: print(f'\u041e\u0448\u0438\u0431\u043a\u0430 \u043f\u0440\u0438 \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u043a\u043b\u0438\u0435\u043d\u0442\u0443 {name}') client_socket.close() remove_client(client_socket, name) def remove_client(client_socket, client_name): for client in CLIENTS: if client[0] == client_socket and client[1] == client_name: CLIENTS.remove(client) break def start_server(): server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM) server_socket.bind(('localhost', 12345)) server_socket.listen(5) print('\u0421\u0435\u0440\u0432\u0435\u0440 \u0437\u0430\u043f\u0443\u0449\u0435\u043d. \u041e\u0436\u0438\u0434\u0430\u043d\u0438\u0435 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0439...') while True: client_socket, client_address = server_socket.accept() print(f'\u0423\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d\u043e \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0435 \u0441 \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u043c {client_address}') client_name = client_socket.recv(1024).decode('utf-8') print(f'\u041a\u043b\u0438\u0435\u043d\u0442 {client_name} \u043f\u0440\u0438\u0441\u043e\u0435\u0434\u0438\u043d\u0438\u043b\u0441\u044f') CLIENTS.append((client_socket, client_name)) client_thread = threading.Thread(target=handle_client, args=(client_socket, client_name)) client_thread.start() CLIENTS = [] server_thread = threading.Thread(target=start_server) server_thread.start() \u041a\u043b\u0438\u0435\u043d\u0442 import threading import socket def handle_server(server_socket): while True: try: message = server_socket.recv(1024).decode('utf-8') if message: print('\\n' + message) except: print('\u041f\u043e\u0442\u0435\u0440\u044f\u043d\u043e \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0435 \u0441 \u0441\u0435\u0440\u0432\u0435\u0440\u043e\u043c') server_socket.close() break def start_client(): client_name = input('\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u0432\u0430\u0448\u0435 \u0438\u043c\u044f: ') client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM) client_socket.connect(('localhost', 12345)) client_socket.send(client_name.encode('utf-8')) client_thread = threading.Thread(target=handle_server, args=(client_socket,)) client_thread.start() while True: message = input() client_socket.send(message.encode('utf-8')) client_thread = threading.Thread(target=start_client) client_thread.start() \u0414\u0435\u043c\u043e\u043d\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0417\u0430\u043f\u0443\u0441\u043a server.py: \u042e\u0437\u0435\u0440 1 \u042e\u0437\u0435\u0440 2 \u042e\u0437\u0435\u0440 3 \u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u21165 \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u043f\u0440\u043e\u0441\u0442\u043e\u0439 web-\u0441\u0435\u0440\u0432\u0435\u0440 \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 GET \u0438 POST http \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Python \u0438 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 socket. \u0420\u0435\u0448\u0435\u043d\u0438\u0435 web-server import socket class WebServer: def __init__(self, host, port): self.host = host self.port = port self.data = {} # \u0421\u043b\u043e\u0432\u0430\u0440\u044c \u0434\u043b\u044f \u0445\u0440\u0430\u043d\u0435\u043d\u0438\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0435 \u0438 \u043e\u0446\u0435\u043d\u043a\u0435 def start(self): server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM) server_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1) server_socket.bind((self.host, self.port)) server_socket.listen(1) print(f\"Server is running at http://{self.host}:{self.port}/\") while True: client_socket, client_address = server_socket.accept() request = client_socket.recv(1024).decode() if request: response = self.handle_request(request) client_socket.sendall(response.encode()) client_socket.close() def handle_request(self, request): headers = request.split(\"\\r\\n\") method, path, version = headers[0].split(\" \") if method == \"GET\": if path == \"/\": return self.get_homepage() elif path.startswith(\"/grades/\"): discipline = path.split(\"/\")[2] return self.get_grades(discipline) elif method == \"POST\": if path == \"/add\": return self.handle_add_request(headers[-1]) return self.not_found() def get_homepage(self): content = \"<h1>Grades by Discipline</h1>\" if self.data: content += \"<ul>\" for discipline, grade in self.data.items(): content += f\"<li><a href='/grades/{discipline}'>{discipline}</a></li>\" content += \"</ul>\" else: content += \"<p>No information about grades available</p>\" response = \"HTTP/1.1 200 OK\\r\\n\" response += \"Content-Type: text/html\\r\\n\" response += \"Connection: close\\r\\n\" response += f\"Content-Length: {len(content)}\\r\\n\" response += \"\\r\\n\" response += content return response def get_grades(self, discipline): content = \"<h1>Grades for Discipline: {}</h1>\".format(discipline) if discipline in self.data: grade = self.data[discipline] content += \"<p>Grade: {}</p>\".format(grade) else: content += \"<p>No information available for the specified discipline</p>\" response = \"HTTP/1.1 200 OK\\r\\n\" response += \"Content-Type: text/html\\r\\n\" response += \"Connection: close\\r\\n\" response += f\"Content-Length: {len(content)}\\r\\n\" response += \"\\r\\n\" response += content return response def handle_add_request(self, data): data = data.split(\"&\") discipline = data[0].split(\"=\")[1] grade = data[1].split(\"=\")[1] self.data[discipline] = grade return self.get_homepage() def not_found(self): response = \"HTTP/1.1 404 Not Found\\r\\n\" response += \"Content-Type: text/plain\\r\\n\" response += \"Connection: close\\r\\n\" response += \"Content-Length: 9\\r\\n\" response += \"\\r\\n\" response += \"Not Found\" return response if __name__ == \"__main__\": server = WebServer(\"127.0.0.3\", 8080) server.start() \u0414\u0435\u043c\u043e\u043d\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0417\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u043c \u0441\u0435\u0440\u0432\u0435\u0440 \u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443 \u0414\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u043c \u043f\u0440\u0435\u0434\u043c\u0435\u0442 \u0438 \u043e\u0446\u0435\u043d\u043a\u0443 \u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c","title":"Lab1"},{"location":"lab1/#no1","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0443\u044e \u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u043e\u0442\u0441\u044b\u043b\u0430\u0435\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u201cHello, server\u201d. \u0421\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u043e\u0442\u0440\u0430\u0437\u0438\u0442\u044c\u0441\u044f \u043d\u0430 \u0441\u0435\u0440\u0432\u0435\u0440\u0435. \u0421\u0435\u0440\u0432\u0435\u0440 \u0432 \u043e\u0442\u0432\u0435\u0442 \u043e\u0442\u0441\u044b\u043b\u0430\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u00abHello, client\u00bb. \u0421\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u043e\u0442\u043e\u0431\u0440\u0430\u0437\u0438\u0442\u044c\u0441\u044f \u0443 \u043a\u043b\u0438\u0435\u043d\u0442\u0430. \u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 socket. \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b\u0430 UDP.","title":"\u0417\u0430\u0434\u0430\u0447\u0430 \u21161"},{"location":"lab1/#_1","text":"\u0421\u0435\u0440\u0432\u0435\u0440 import socket server_socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM) server_address = ('localhost', 12345) server_socket.bind(server_address) print('\u0421\u0435\u0440\u0432\u0435\u0440 \u0437\u0430\u043f\u0443\u0449\u0435\u043d \u0438 \u043e\u0436\u0438\u0434\u0430\u0435\u0442 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u043e\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0430...') while True: data, client_address = server_socket.recvfrom(1024) message = data.decode('utf-8') print('\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u043e \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u043e\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0430:', message) response = 'Hello, client' server_socket.sendto(response.encode('utf-8'), client_address) \u041a\u043b\u0438\u0435\u043d\u0442 import socket client_socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM) server_address = ('localhost', 12345) message = 'Hello, server' client_socket.sendto(message.encode('utf-8'), server_address) response, _ = client_socket.recvfrom(1024) response_message = response.decode('utf-8') print('\u041f\u043e\u043b\u0443\u0447\u0435\u043d \u043e\u0442\u0432\u0435\u0442 \u043e\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u0430:', response_message) client_socket.close()","title":"\u0420\u0435\u0448\u0435\u043d\u0438\u0435"},{"location":"lab1/#_2","text":"\u0421\u0435\u0440\u0432\u0435\u0440\u043d\u0430\u044f \u0447\u0430\u0441\u0442\u044c \u041a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0430\u044f \u0447\u0430\u0441\u0442\u044c","title":"\u041f\u0440\u0438\u043c\u0435\u0440 \u0440\u0430\u0431\u043e\u0442\u044b \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b"},{"location":"lab1/#no2","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0443\u044e \u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u0437\u0430\u043f\u0440\u0430\u0448\u0438\u0432\u0430\u0435\u0442 \u0443 \u0441\u0435\u0440\u0432\u0435\u0440\u0430 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043c\u0430\u0442\u0435\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438, \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u0432\u0432\u043e\u0434\u044f\u0442\u0441\u044f \u0441 \u043a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440\u044b. \u0421\u0435\u0440\u0432\u0435\u0440 \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443. \u041c\u043e\u0439 \u0432\u0430\u0440\u0438\u0430\u043d\u0442, \u0441\u043e\u0433\u043b\u0430\u0441\u043d\u043e \u0441\u043f\u0438\u0441\u043a\u0443 \u0433\u0440\u0443\u043f\u043f\u044b, \u2013 \u0442\u0435\u043e\u0440\u0435\u043c\u0430 \u041f\u0438\u0444\u0430\u0433\u043e\u0440\u0430.","title":"\u0417\u0430\u0434\u0430\u0447\u0430 \u21162"},{"location":"lab1/#_3","text":"\u0421\u0435\u0440\u0432\u0435\u0440 import socket server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM) server_address = ('localhost', 12345) server_socket.bind(server_address) server_socket.listen(1) print('\u0421\u0435\u0440\u0432\u0435\u0440 \u0437\u0430\u043f\u0443\u0449\u0435\u043d \u0438 \u043e\u0436\u0438\u0434\u0430\u0435\u0442 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u043a\u043b\u0438\u0435\u043d\u0442\u0430...') while True: client_socket, client_address = server_socket.accept() print('\u041f\u043e\u0434\u043a\u043b\u044e\u0447\u0438\u043b\u0441\u044f \u043a\u043b\u0438\u0435\u043d\u0442:', client_address) base = float(client_socket.recv(1024).decode('utf-8')) height = float(client_socket.recv(1024).decode('utf-8')) area = base * height client_socket.send(str(area).encode('utf-8')) client_socket.close() \u041a\u043b\u0438\u0435\u043d\u0442 import socket client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM) server_address = ('localhost', 12345) client_socket.connect(server_address) print('\u041f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u043e \u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0443:', server_address) base = float(input('\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043e\u0441\u043d\u043e\u0432\u0430\u043d\u0438\u044f: ')) height = float(input('\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0432\u044b\u0441\u043e\u0442\u044b: ')) if base < 0 or height < 0: print('\u0412\u044b\u0441\u043e\u0442\u0430 \u0438 \u0434\u043b\u0438\u043d\u0430 \u043d\u0435 \u043c\u043e\u0433\u0443\u0442 \u0431\u044b\u0442\u044c \u043e\u0442\u0440\u0438\u0446\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u043c\u0438.') client_socket.close() exit() client_socket.send(str(base).encode('utf-8')) client_socket.send(str(height).encode('utf-8')) result = client_socket.recv(1024).decode('utf-8') print('\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438:', result) client_socket.close()","title":"\u0420\u0435\u0448\u0435\u043d\u0438\u0435"},{"location":"lab1/#_4","text":"\u041a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0430\u044f \u0447\u0430\u0441\u0442\u044c \u041a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0430\u044f \u0447\u0430\u0441\u0442\u044c","title":"\u0414\u0435\u043c\u043e\u043d\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u0440\u0430\u0431\u043e\u0442\u044b"},{"location":"lab1/#no3","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0430\u0435\u0442\u0441\u044f \u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0443. \u0412 \u043e\u0442\u0432\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 http-\u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0435\u0435 html-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443, \u043a\u043e\u0442\u043e\u0440\u0443\u044e \u0441\u0435\u0440\u0432\u0435\u0440 \u043f\u043e\u0434\u0433\u0440\u0443\u0436\u0430\u0435\u0442 \u0438\u0437 \u0444\u0430\u0439\u043b\u0430 index.html.","title":"\u0417\u0430\u0434\u0430\u0447\u0430 \u21163"},{"location":"lab1/#_5","text":"\u0421\u0435\u0440\u0432\u0435\u0440 import socket server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM) server_address = ('localhost', 80) server_socket.bind(server_address) server_socket.listen(1) print('\u0421\u0435\u0440\u0432\u0435\u0440 \u0437\u0430\u043f\u0443\u0449\u0435\u043d \u0438 \u043e\u0436\u0438\u0434\u0430\u0435\u0442 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u043a\u043b\u0438\u0435\u043d\u0442\u0430...') while True: client_socket, client_address = server_socket.accept() print('\u041f\u043e\u0434\u043a\u043b\u044e\u0447\u0438\u043b\u0441\u044f \u043a\u043b\u0438\u0435\u043d\u0442:', client_address) with open('index.html', 'r') as file: html_content = file.read() http_response = 'HTTP/1.1 200 OK\\r\\n' http_response += 'Content-Type: text/html\\r\\n' http_response += '\\r\\n' http_response += html_content client_socket.send(http_response.encode('utf-8')) client_socket.close()","title":"\u0420\u0435\u0448\u0435\u043d\u0438\u0435"},{"location":"lab1/#_6","text":"\u041f\u0440\u0438 \u043f\u0435\u0440\u0435\u0445\u043e\u0434\u0435 \u043f\u043e \u043d\u0443\u0436\u043d\u043e\u043c\u0443 \u0441\u043e\u043a\u0435\u0442\u0443 \u0432 \u0431\u0440\u0430\u0443\u0437\u0435\u0440\u0435 \u0432\u0438\u0434\u0438\u043c html","title":"\u0414\u0435\u043c\u043e\u043d\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u0440\u0430\u0431\u043e\u0442\u044b"},{"location":"lab1/#no4","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0434\u0432\u0443\u0445\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0438\u043b\u0438 \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0447\u0430\u0442. \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0433\u043e \u0447\u0430\u0442\u0430 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0431\u0430\u043b\u043b\u043e\u0432.","title":"\u0417\u0430\u0434\u0430\u0447\u0430 \u21164"},{"location":"lab1/#_7","text":"\u0421\u0435\u0440\u0432\u0435\u0440 import threading import socket def handle_client(client_socket, client_name): while True: try: message = client_socket.recv(1024).decode('utf-8') if message: print(f'{client_name}: {message}') broadcast_message(client_name, message) except: print(f'\u041f\u043e\u0442\u0435\u0440\u044f\u043d\u043e \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0435 \u0441 \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u043c {client_name}') client_socket.close() break def broadcast_message(sender_name, message): for client_socket, name in CLIENTS: if name != sender_name: try: client_socket.send(f'{sender_name}: {message}'.encode('utf-8')) except: print(f'\u041e\u0448\u0438\u0431\u043a\u0430 \u043f\u0440\u0438 \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u043a\u043b\u0438\u0435\u043d\u0442\u0443 {name}') client_socket.close() remove_client(client_socket, name) def remove_client(client_socket, client_name): for client in CLIENTS: if client[0] == client_socket and client[1] == client_name: CLIENTS.remove(client) break def start_server(): server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM) server_socket.bind(('localhost', 12345)) server_socket.listen(5) print('\u0421\u0435\u0440\u0432\u0435\u0440 \u0437\u0430\u043f\u0443\u0449\u0435\u043d. \u041e\u0436\u0438\u0434\u0430\u043d\u0438\u0435 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0439...') while True: client_socket, client_address = server_socket.accept() print(f'\u0423\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d\u043e \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0435 \u0441 \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u043c {client_address}') client_name = client_socket.recv(1024).decode('utf-8') print(f'\u041a\u043b\u0438\u0435\u043d\u0442 {client_name} \u043f\u0440\u0438\u0441\u043e\u0435\u0434\u0438\u043d\u0438\u043b\u0441\u044f') CLIENTS.append((client_socket, client_name)) client_thread = threading.Thread(target=handle_client, args=(client_socket, client_name)) client_thread.start() CLIENTS = [] server_thread = threading.Thread(target=start_server) server_thread.start() \u041a\u043b\u0438\u0435\u043d\u0442 import threading import socket def handle_server(server_socket): while True: try: message = server_socket.recv(1024).decode('utf-8') if message: print('\\n' + message) except: print('\u041f\u043e\u0442\u0435\u0440\u044f\u043d\u043e \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0435 \u0441 \u0441\u0435\u0440\u0432\u0435\u0440\u043e\u043c') server_socket.close() break def start_client(): client_name = input('\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u0432\u0430\u0448\u0435 \u0438\u043c\u044f: ') client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM) client_socket.connect(('localhost', 12345)) client_socket.send(client_name.encode('utf-8')) client_thread = threading.Thread(target=handle_server, args=(client_socket,)) client_thread.start() while True: message = input() client_socket.send(message.encode('utf-8')) client_thread = threading.Thread(target=start_client) client_thread.start()","title":"\u0420\u0435\u0448\u0435\u043d\u0438\u0435"},{"location":"lab1/#_8","text":"\u0417\u0430\u043f\u0443\u0441\u043a server.py: \u042e\u0437\u0435\u0440 1 \u042e\u0437\u0435\u0440 2 \u042e\u0437\u0435\u0440 3","title":"\u0414\u0435\u043c\u043e\u043d\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u0440\u0430\u0431\u043e\u0442\u044b"},{"location":"lab1/#no5","text":"\u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u043f\u0440\u043e\u0441\u0442\u043e\u0439 web-\u0441\u0435\u0440\u0432\u0435\u0440 \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 GET \u0438 POST http \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Python \u0438 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 socket.","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u21165"},{"location":"lab1/#_9","text":"web-server import socket class WebServer: def __init__(self, host, port): self.host = host self.port = port self.data = {} # \u0421\u043b\u043e\u0432\u0430\u0440\u044c \u0434\u043b\u044f \u0445\u0440\u0430\u043d\u0435\u043d\u0438\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0435 \u0438 \u043e\u0446\u0435\u043d\u043a\u0435 def start(self): server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM) server_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1) server_socket.bind((self.host, self.port)) server_socket.listen(1) print(f\"Server is running at http://{self.host}:{self.port}/\") while True: client_socket, client_address = server_socket.accept() request = client_socket.recv(1024).decode() if request: response = self.handle_request(request) client_socket.sendall(response.encode()) client_socket.close() def handle_request(self, request): headers = request.split(\"\\r\\n\") method, path, version = headers[0].split(\" \") if method == \"GET\": if path == \"/\": return self.get_homepage() elif path.startswith(\"/grades/\"): discipline = path.split(\"/\")[2] return self.get_grades(discipline) elif method == \"POST\": if path == \"/add\": return self.handle_add_request(headers[-1]) return self.not_found() def get_homepage(self): content = \"<h1>Grades by Discipline</h1>\" if self.data: content += \"<ul>\" for discipline, grade in self.data.items(): content += f\"<li><a href='/grades/{discipline}'>{discipline}</a></li>\" content += \"</ul>\" else: content += \"<p>No information about grades available</p>\" response = \"HTTP/1.1 200 OK\\r\\n\" response += \"Content-Type: text/html\\r\\n\" response += \"Connection: close\\r\\n\" response += f\"Content-Length: {len(content)}\\r\\n\" response += \"\\r\\n\" response += content return response def get_grades(self, discipline): content = \"<h1>Grades for Discipline: {}</h1>\".format(discipline) if discipline in self.data: grade = self.data[discipline] content += \"<p>Grade: {}</p>\".format(grade) else: content += \"<p>No information available for the specified discipline</p>\" response = \"HTTP/1.1 200 OK\\r\\n\" response += \"Content-Type: text/html\\r\\n\" response += \"Connection: close\\r\\n\" response += f\"Content-Length: {len(content)}\\r\\n\" response += \"\\r\\n\" response += content return response def handle_add_request(self, data): data = data.split(\"&\") discipline = data[0].split(\"=\")[1] grade = data[1].split(\"=\")[1] self.data[discipline] = grade return self.get_homepage() def not_found(self): response = \"HTTP/1.1 404 Not Found\\r\\n\" response += \"Content-Type: text/plain\\r\\n\" response += \"Connection: close\\r\\n\" response += \"Content-Length: 9\\r\\n\" response += \"\\r\\n\" response += \"Not Found\" return response if __name__ == \"__main__\": server = WebServer(\"127.0.0.3\", 8080) server.start()","title":"\u0420\u0435\u0448\u0435\u043d\u0438\u0435"},{"location":"lab1/#_10","text":"\u0417\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u043c \u0441\u0435\u0440\u0432\u0435\u0440 \u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443 \u0414\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u043c \u043f\u0440\u0435\u0434\u043c\u0435\u0442 \u0438 \u043e\u0446\u0435\u043d\u043a\u0443 \u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c","title":"\u0414\u0435\u043c\u043e\u043d\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u0440\u0430\u0431\u043e\u0442\u044b"},{"location":"lab2/","text":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 2 \u0420\u0415\u0410\u041b\u0418\u0417\u0410\u0426\u0418\u042f \u041f\u0420\u041e\u0421\u0422\u041e\u0413\u041e \u0421\u0410\u0419\u0422\u0410 \u0421\u0420\u0415\u0414\u0421\u0422\u0412\u0410\u041c\u0418 DJANGO \u0412\u0432\u0435\u0434\u0435\u043d\u0438\u0435 \u0426\u0435\u043b\u044c: \u043e\u0432\u043b\u0430\u0434\u0435\u0442\u044c \u043f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u043c\u0438 \u043d\u0430\u0432\u044b\u043a\u0430\u043c\u0438 \u0438 \u0443\u043c\u0435\u043d\u0438\u044f\u043c\u0438 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 web-\u0441\u0435\u0440\u0432\u0438\u0441\u043e\u0432 \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Django 2.2. \u041e\u0431\u043e\u0440\u0443\u0434\u043e\u0432\u0430\u043d\u0438\u0435: \u043a\u043e\u043c\u043f\u044c\u044e\u0442\u0435\u0440\u043d\u044b\u0439 \u043a\u043b\u0430\u0441\u0441. \u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u043d\u043e\u0435 \u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0435\u043d\u0438\u0435: Python 3.6+, Django 3, PostgreSQL *. \u041f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0435 \u0437\u0430\u0434\u0430\u043d\u0438\u0435: \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u0430\u0439\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f \u0444\u0440\u0435\u0439\u043c\u0432\u043e\u0440\u043a Django 3 \u0438 \u0421\u0423\u0411\u0414 PostgreSQL *, \u0432 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0438 \u0441 \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u043e\u043c \u0437\u0430\u0434\u0430\u043d\u0438\u044f \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u044b. \u0412\u0430\u0440\u0438\u0430\u043d\u0442: 4 \u0417\u0430\u0434\u0430\u043d\u0438\u0435: \u0421\u043f\u0438\u0441\u043e\u043a \u0442\u0443\u0440\u043e\u0432 \u0442\u0443\u0440\u0438\u0441\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u0444\u0438\u0440\u043c\u044b \u0425\u0440\u0430\u043d\u0438\u0442\u0441\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0438 \u0442\u0443\u0440\u0430, \u0442\u0443\u0440\u0430\u0433\u0435\u043d\u0441\u0442\u0432\u0435, \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0438 \u0442\u0443\u0440\u0430, \u043f\u0435\u0440\u0438\u043e\u0434\u0435 \u043f\u0440\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u044f \u0442\u0443\u0440\u0430, \u0443\u0441\u043b\u043e\u0432\u0438\u044f\u0445 \u043e\u043f\u043b\u0430\u0442\u044b. \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b: \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u043d\u043e\u0432\u044b\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439. \u041f\u0440\u043e\u0441\u043c\u043e\u0442\u0440 \u0438 \u0440\u0435\u0437\u0435\u0440\u0432\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0442\u0443\u0440\u043e\u0432. \u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u0434\u043e\u043b\u0436\u0435\u043d \u0438\u043c\u0435\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0440\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0438 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u044f \u0441\u0432\u043e\u0438\u0445 \u0440\u0435\u0437\u0435\u0440\u0432\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0439. \u041d\u0430\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043e\u0442\u0437\u044b\u0432\u043e\u0432 \u043a \u0442\u0443\u0440\u0430\u043c. \u041f\u0440\u0438 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0438 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0435\u0432, \u0434\u043e\u043b\u0436\u043d\u044b \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0442\u044c\u0441\u044f \u0434\u0430\u0442\u044b \u0442\u0443\u0440\u0430, \u0442\u0435\u043a\u0441\u0442 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u044f, \u0440\u0435\u0439\u0442\u0438\u043d\u0433 (1-10), \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0442\u043e\u0440\u0435. \u0410\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u043e\u0440 \u0434\u043e\u043b\u0436\u0435\u043d \u0438\u043c\u0435\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0434\u0438\u0442\u044c \u0440\u0435\u0437\u0435\u0440\u0432\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0442\u0443\u0440\u0430 \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Django-admin. \u0412 \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u043e\u0439 \u0447\u0430\u0441\u0442\u0438 \u0434\u043e\u043b\u0436\u043d\u0430 \u0444\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0442\u0430\u0431\u043b\u0438\u0446\u0430, \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u044e\u0449\u0430\u044f \u0432\u0441\u0435 \u043f\u0440\u043e\u0434\u0430\u043d\u043d\u044b\u0435 \u0442\u0443\u0440\u044b \u043f\u043e \u0441\u0442\u0440\u0430\u043d\u0430\u043c. models \u0412 \u0444\u0430\u0439\u043b\u0435 models.py \u0443 \u043d\u0430\u0441 4 \u043c\u043e\u0434\u0435\u043b\u0438 \u0434\u043b\u044f \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u0433\u043e \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u0430. from django.db import models from users.models import Tourist class Tour(models.Model): name = models.CharField(max_length=300) destination = models.CharField(max_length=200) country = models.CharField(max_length=100) description = models.CharField(max_length=1000) tourists = models.ManyToManyField(Tourist, through='Reservation') Tour \u2013 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0442\u0443\u0440\u0430\u0445: \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435, \u0430\u0433\u0435\u043d\u0441\u0442\u0432\u043e, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u0443\u0441\u043b\u0443\u0433\u0443, \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0442\u0443\u0440\u0430, \u0434\u0430\u0442\u044b \u043d\u0430\u0447\u0430\u043b\u0430 \u0438 \u043a\u043e\u043d\u0446\u0430, \u0441\u043f\u043e\u0441\u043e\u0431 \u043e\u043f\u043b\u0430\u0442\u044b \u0438 \u0441\u0442\u0430\u0442\u0443\u0441 \"\u043f\u0440\u043e\u0434\u0430\u043d\u043e\" \u0438\u043b\u0438 \u043d\u0435\u0442; class Reservation(models.Model): tourist = models.ForeignKey(Tourist, on_delete=models.DO_NOTHING) tour = models.ForeignKey(Tour, on_delete=models.DO_NOTHING) start_date = models.DateField() end_date = models.DateField() is_confirmed = models.BooleanField(default=False) Reservation \u2013 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435 \u0438 \u0435\u0433\u043e \u0440\u0435\u0437\u0435\u0440\u0432\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0438; class Review(models.Model): rating = models.IntegerField() reservation = models.ForeignKey(Reservation, on_delete=models.DO_NOTHING) comment = models.CharField(max_length=1000) Review \u2013 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e\u0431 \u043e\u0442\u0437\u044b\u0432\u0430\u0445: \u043e\u0446\u0435\u043d\u043a\u0430, \u0440\u0435\u0437\u0435\u0440\u0432\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435, \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0439; forms \u0424\u043e\u0440\u043c\u044b \u0434\u043b\u044f \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439 from django.contrib.auth.forms import UserCreationForm from .models import Tourist class TouristCreationForm(UserCreationForm): class Meta: model = Tourist fields = ['username', 'first_name', 'last_name', 'passport'] html \u2013 \u043a\u043e\u0434 \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f \u0434\u043b\u044f \u0432\u0445\u043e\u0434\u0430 \u0438\u043b\u0438 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f <!DOCTYPE html> <html lang=\"en\"> <head> <meta charset=\"UTF-8\"> <title>Create account</title> </head> <body> <form method=\"post\">{% csrf_token %} {{ form.as_p }} <input type=\"submit\" value=\"Save\"> </form> </body> <h3>Already have an account? <a href=\"/accounts/login/\">Sign in</a></h3> </html> views from django.views.generic.edit import CreateView, UpdateView, DeleteView from django.views.generic.list import ListView from django.views.generic.detail import DetailView from django.contrib.auth.mixins import LoginRequiredMixin from django.contrib import messages from .models import Reservation, Tour, Review from django.http import HttpResponseBadRequest class ReservationCreationView(LoginRequiredMixin, CreateView): model = Reservation success_url = \"/reservations\" fields = ['start_date', 'end_date'] template_name = \"reservation_form.html\" def form_valid(self, form): tour_id = self.kwargs['id'] if not tour_id: return HttpResponseBadRequest(\"Invalid tour id\") tour_id = int(tour_id) reservation: Reservation = form.instance reservation.tourist = self.request.user reservation.tour = Tour.objects.get(pk=tour_id) return super().form_valid(form) class ReservationUpdateView(LoginRequiredMixin, UpdateView): model = Reservation success_url = \"/reservations\" fields = [\"start_date\", \"end_date\"] template_name = \"reservation_form.html\" def form_valid(self, form): reservation_id = self.kwargs['pk'] if not reservation_id: return HttpResponseBadRequest(\"Invalid reservation id\") reservation_id = int(reservation_id) prev_reservation: Reservation = Reservation.objects.get(pk=reservation_id) if prev_reservation.tourist != self.request.user: return HttpResponseBadRequest(\"Invalid reservation id\") reservation: Reservation = form.instance reservation.tourist = self.request.user reservation.tour = prev_reservation.tour return super().form_valid(form) class ReservationListView(LoginRequiredMixin, ListView): model = Reservation template_name = \"reservation_list.html\" queryset = Reservation.objects.all() def get_queryset(self): user = self.request.user query_set = self.queryset.filter(tourist=user) return query_set class ReservationDetailView(LoginRequiredMixin, DetailView): model = Reservation template_name = \"reservation_detail.html\" class ReservationDeleteView(LoginRequiredMixin, DeleteView): model = Reservation success_url = \"/reservations\" template_name = \"reservation_delete.html\" def form_valid(self, form): messages.success(self.request, \"The task was deleted successfully.\") return super(ReservationDeleteView, self).form_valid(form) class ToursListView(LoginRequiredMixin, ListView): model = Tour template_name = \"tour_list.html\" class TourDetailView(LoginRequiredMixin, DetailView): model = Tour template_name = \"tour_detail.html\" class ReviewCreateView(LoginRequiredMixin, CreateView): model = Review success_url = \"/reservations\" template_name = \"review_form.html\" fields = ['rating', 'comment'] def form_valid(self, form): reservation_id = self.kwargs['id'] if not reservation_id: return HttpResponseBadRequest(\"Invalid tour id\") reservation_id = int(reservation_id) review: Review = form.instance review.reservation = Reservation.objects.get(pk=reservation_id) return super().form_valid(form) class ReviewListView(LoginRequiredMixin, ListView): model = Review template_name = \"review_list.html\" queryset = Review.objects.all() def get_queryset(self): tour_id = int(self.kwargs['id']) tour: Tour = Tour.objects.get(pk=tour_id) query_set = self.queryset.filter(reservation__tour=tour) return query_set urls from django.urls import path from .views import * urlpatterns = [ path(\"tours/<int:id>/reserve\", ReservationCreationView.as_view()), path(\"tours\", ToursListView.as_view()), path(\"\", ToursListView.as_view()), path(\"tours/<int:pk>/\", TourDetailView.as_view()), path(\"reservations/<int:pk>/edit\", ReservationUpdateView.as_view()), path(\"reservations/<int:pk>/delete\", ReservationDeleteView.as_view()), path(\"reservations/<int:pk>\", ReservationDetailView.as_view()), path(\"reservations/\", ReservationListView.as_view()), path(\"reservations/<int:id>/review\", ReviewCreateView.as_view()), path(\"tours/<int:id>/reviews\", ReviewListView.as_view()) ] \u0412\u044b\u0432\u043e\u0434\u044b \u0412 \u0440\u0430\u043c\u043a\u0430\u0445 \u0432\u0442\u043e\u0440\u043e\u0439 \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u044b \"\u0420\u0415\u0410\u041b\u0418\u0417\u0410\u0426\u0418\u042f \u041f\u0420\u041e\u0421\u0422\u041e\u0413\u041e \u0421\u0410\u0419\u0422\u0410 \u0421\u0420\u0415\u0414\u0421\u0422\u0412\u0410\u041c\u0418 DJANGO\" \u0431\u044b\u043b\u043e \u0438\u0437\u0443\u0447\u0435\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 django: \u043f\u0440\u043e\u0435\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445, \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0439 \u0438 \u043e\u0441\u043d\u043e\u0432\u044b html \u2013 \u0432\u0435\u0440\u0441\u0442\u043a\u0438.","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 2"},{"location":"lab2/#2","text":"\u0420\u0415\u0410\u041b\u0418\u0417\u0410\u0426\u0418\u042f \u041f\u0420\u041e\u0421\u0422\u041e\u0413\u041e \u0421\u0410\u0419\u0422\u0410 \u0421\u0420\u0415\u0414\u0421\u0422\u0412\u0410\u041c\u0418 DJANGO","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 2"},{"location":"lab2/#_1","text":"\u0426\u0435\u043b\u044c: \u043e\u0432\u043b\u0430\u0434\u0435\u0442\u044c \u043f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u043c\u0438 \u043d\u0430\u0432\u044b\u043a\u0430\u043c\u0438 \u0438 \u0443\u043c\u0435\u043d\u0438\u044f\u043c\u0438 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 web-\u0441\u0435\u0440\u0432\u0438\u0441\u043e\u0432 \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Django 2.2. \u041e\u0431\u043e\u0440\u0443\u0434\u043e\u0432\u0430\u043d\u0438\u0435: \u043a\u043e\u043c\u043f\u044c\u044e\u0442\u0435\u0440\u043d\u044b\u0439 \u043a\u043b\u0430\u0441\u0441. \u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u043d\u043e\u0435 \u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0435\u043d\u0438\u0435: Python 3.6+, Django 3, PostgreSQL *. \u041f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0435 \u0437\u0430\u0434\u0430\u043d\u0438\u0435: \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u0430\u0439\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f \u0444\u0440\u0435\u0439\u043c\u0432\u043e\u0440\u043a Django 3 \u0438 \u0421\u0423\u0411\u0414 PostgreSQL *, \u0432 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0438 \u0441 \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u043e\u043c \u0437\u0430\u0434\u0430\u043d\u0438\u044f \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u044b. \u0412\u0430\u0440\u0438\u0430\u043d\u0442: 4 \u0417\u0430\u0434\u0430\u043d\u0438\u0435: \u0421\u043f\u0438\u0441\u043e\u043a \u0442\u0443\u0440\u043e\u0432 \u0442\u0443\u0440\u0438\u0441\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u0444\u0438\u0440\u043c\u044b \u0425\u0440\u0430\u043d\u0438\u0442\u0441\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0438 \u0442\u0443\u0440\u0430, \u0442\u0443\u0440\u0430\u0433\u0435\u043d\u0441\u0442\u0432\u0435, \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0438 \u0442\u0443\u0440\u0430, \u043f\u0435\u0440\u0438\u043e\u0434\u0435 \u043f\u0440\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u044f \u0442\u0443\u0440\u0430, \u0443\u0441\u043b\u043e\u0432\u0438\u044f\u0445 \u043e\u043f\u043b\u0430\u0442\u044b. \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b: \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u043d\u043e\u0432\u044b\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439. \u041f\u0440\u043e\u0441\u043c\u043e\u0442\u0440 \u0438 \u0440\u0435\u0437\u0435\u0440\u0432\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0442\u0443\u0440\u043e\u0432. \u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u0434\u043e\u043b\u0436\u0435\u043d \u0438\u043c\u0435\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0440\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0438 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u044f \u0441\u0432\u043e\u0438\u0445 \u0440\u0435\u0437\u0435\u0440\u0432\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0439. \u041d\u0430\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043e\u0442\u0437\u044b\u0432\u043e\u0432 \u043a \u0442\u0443\u0440\u0430\u043c. \u041f\u0440\u0438 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0438 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0435\u0432, \u0434\u043e\u043b\u0436\u043d\u044b \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0442\u044c\u0441\u044f \u0434\u0430\u0442\u044b \u0442\u0443\u0440\u0430, \u0442\u0435\u043a\u0441\u0442 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u044f, \u0440\u0435\u0439\u0442\u0438\u043d\u0433 (1-10), \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0442\u043e\u0440\u0435. \u0410\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u043e\u0440 \u0434\u043e\u043b\u0436\u0435\u043d \u0438\u043c\u0435\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0434\u0438\u0442\u044c \u0440\u0435\u0437\u0435\u0440\u0432\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0442\u0443\u0440\u0430 \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Django-admin. \u0412 \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u043e\u0439 \u0447\u0430\u0441\u0442\u0438 \u0434\u043e\u043b\u0436\u043d\u0430 \u0444\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0442\u0430\u0431\u043b\u0438\u0446\u0430, \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u044e\u0449\u0430\u044f \u0432\u0441\u0435 \u043f\u0440\u043e\u0434\u0430\u043d\u043d\u044b\u0435 \u0442\u0443\u0440\u044b \u043f\u043e \u0441\u0442\u0440\u0430\u043d\u0430\u043c.","title":"\u0412\u0432\u0435\u0434\u0435\u043d\u0438\u0435"},{"location":"lab2/#models","text":"\u0412 \u0444\u0430\u0439\u043b\u0435 models.py \u0443 \u043d\u0430\u0441 4 \u043c\u043e\u0434\u0435\u043b\u0438 \u0434\u043b\u044f \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u0433\u043e \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u0430. from django.db import models from users.models import Tourist class Tour(models.Model): name = models.CharField(max_length=300) destination = models.CharField(max_length=200) country = models.CharField(max_length=100) description = models.CharField(max_length=1000) tourists = models.ManyToManyField(Tourist, through='Reservation') Tour \u2013 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0442\u0443\u0440\u0430\u0445: \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435, \u0430\u0433\u0435\u043d\u0441\u0442\u0432\u043e, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u0443\u0441\u043b\u0443\u0433\u0443, \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0442\u0443\u0440\u0430, \u0434\u0430\u0442\u044b \u043d\u0430\u0447\u0430\u043b\u0430 \u0438 \u043a\u043e\u043d\u0446\u0430, \u0441\u043f\u043e\u0441\u043e\u0431 \u043e\u043f\u043b\u0430\u0442\u044b \u0438 \u0441\u0442\u0430\u0442\u0443\u0441 \"\u043f\u0440\u043e\u0434\u0430\u043d\u043e\" \u0438\u043b\u0438 \u043d\u0435\u0442; class Reservation(models.Model): tourist = models.ForeignKey(Tourist, on_delete=models.DO_NOTHING) tour = models.ForeignKey(Tour, on_delete=models.DO_NOTHING) start_date = models.DateField() end_date = models.DateField() is_confirmed = models.BooleanField(default=False) Reservation \u2013 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435 \u0438 \u0435\u0433\u043e \u0440\u0435\u0437\u0435\u0440\u0432\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0438; class Review(models.Model): rating = models.IntegerField() reservation = models.ForeignKey(Reservation, on_delete=models.DO_NOTHING) comment = models.CharField(max_length=1000) Review \u2013 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e\u0431 \u043e\u0442\u0437\u044b\u0432\u0430\u0445: \u043e\u0446\u0435\u043d\u043a\u0430, \u0440\u0435\u0437\u0435\u0440\u0432\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435, \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0439;","title":"models"},{"location":"lab2/#forms","text":"\u0424\u043e\u0440\u043c\u044b \u0434\u043b\u044f \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439 from django.contrib.auth.forms import UserCreationForm from .models import Tourist class TouristCreationForm(UserCreationForm): class Meta: model = Tourist fields = ['username', 'first_name', 'last_name', 'passport'] html \u2013 \u043a\u043e\u0434 \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f \u0434\u043b\u044f \u0432\u0445\u043e\u0434\u0430 \u0438\u043b\u0438 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f <!DOCTYPE html> <html lang=\"en\"> <head> <meta charset=\"UTF-8\"> <title>Create account</title> </head> <body> <form method=\"post\">{% csrf_token %} {{ form.as_p }} <input type=\"submit\" value=\"Save\"> </form> </body> <h3>Already have an account? <a href=\"/accounts/login/\">Sign in</a></h3> </html>","title":"forms"},{"location":"lab2/#views","text":"from django.views.generic.edit import CreateView, UpdateView, DeleteView from django.views.generic.list import ListView from django.views.generic.detail import DetailView from django.contrib.auth.mixins import LoginRequiredMixin from django.contrib import messages from .models import Reservation, Tour, Review from django.http import HttpResponseBadRequest class ReservationCreationView(LoginRequiredMixin, CreateView): model = Reservation success_url = \"/reservations\" fields = ['start_date', 'end_date'] template_name = \"reservation_form.html\" def form_valid(self, form): tour_id = self.kwargs['id'] if not tour_id: return HttpResponseBadRequest(\"Invalid tour id\") tour_id = int(tour_id) reservation: Reservation = form.instance reservation.tourist = self.request.user reservation.tour = Tour.objects.get(pk=tour_id) return super().form_valid(form) class ReservationUpdateView(LoginRequiredMixin, UpdateView): model = Reservation success_url = \"/reservations\" fields = [\"start_date\", \"end_date\"] template_name = \"reservation_form.html\" def form_valid(self, form): reservation_id = self.kwargs['pk'] if not reservation_id: return HttpResponseBadRequest(\"Invalid reservation id\") reservation_id = int(reservation_id) prev_reservation: Reservation = Reservation.objects.get(pk=reservation_id) if prev_reservation.tourist != self.request.user: return HttpResponseBadRequest(\"Invalid reservation id\") reservation: Reservation = form.instance reservation.tourist = self.request.user reservation.tour = prev_reservation.tour return super().form_valid(form) class ReservationListView(LoginRequiredMixin, ListView): model = Reservation template_name = \"reservation_list.html\" queryset = Reservation.objects.all() def get_queryset(self): user = self.request.user query_set = self.queryset.filter(tourist=user) return query_set class ReservationDetailView(LoginRequiredMixin, DetailView): model = Reservation template_name = \"reservation_detail.html\" class ReservationDeleteView(LoginRequiredMixin, DeleteView): model = Reservation success_url = \"/reservations\" template_name = \"reservation_delete.html\" def form_valid(self, form): messages.success(self.request, \"The task was deleted successfully.\") return super(ReservationDeleteView, self).form_valid(form) class ToursListView(LoginRequiredMixin, ListView): model = Tour template_name = \"tour_list.html\" class TourDetailView(LoginRequiredMixin, DetailView): model = Tour template_name = \"tour_detail.html\" class ReviewCreateView(LoginRequiredMixin, CreateView): model = Review success_url = \"/reservations\" template_name = \"review_form.html\" fields = ['rating', 'comment'] def form_valid(self, form): reservation_id = self.kwargs['id'] if not reservation_id: return HttpResponseBadRequest(\"Invalid tour id\") reservation_id = int(reservation_id) review: Review = form.instance review.reservation = Reservation.objects.get(pk=reservation_id) return super().form_valid(form) class ReviewListView(LoginRequiredMixin, ListView): model = Review template_name = \"review_list.html\" queryset = Review.objects.all() def get_queryset(self): tour_id = int(self.kwargs['id']) tour: Tour = Tour.objects.get(pk=tour_id) query_set = self.queryset.filter(reservation__tour=tour) return query_set","title":"views"},{"location":"lab2/#urls","text":"from django.urls import path from .views import * urlpatterns = [ path(\"tours/<int:id>/reserve\", ReservationCreationView.as_view()), path(\"tours\", ToursListView.as_view()), path(\"\", ToursListView.as_view()), path(\"tours/<int:pk>/\", TourDetailView.as_view()), path(\"reservations/<int:pk>/edit\", ReservationUpdateView.as_view()), path(\"reservations/<int:pk>/delete\", ReservationDeleteView.as_view()), path(\"reservations/<int:pk>\", ReservationDetailView.as_view()), path(\"reservations/\", ReservationListView.as_view()), path(\"reservations/<int:id>/review\", ReviewCreateView.as_view()), path(\"tours/<int:id>/reviews\", ReviewListView.as_view()) ]","title":"urls"},{"location":"lab2/#_2","text":"\u0412 \u0440\u0430\u043c\u043a\u0430\u0445 \u0432\u0442\u043e\u0440\u043e\u0439 \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u044b \"\u0420\u0415\u0410\u041b\u0418\u0417\u0410\u0426\u0418\u042f \u041f\u0420\u041e\u0421\u0422\u041e\u0413\u041e \u0421\u0410\u0419\u0422\u0410 \u0421\u0420\u0415\u0414\u0421\u0422\u0412\u0410\u041c\u0418 DJANGO\" \u0431\u044b\u043b\u043e \u0438\u0437\u0443\u0447\u0435\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 django: \u043f\u0440\u043e\u0435\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445, \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0439 \u0438 \u043e\u0441\u043d\u043e\u0432\u044b html \u2013 \u0432\u0435\u0440\u0441\u0442\u043a\u0438.","title":"\u0412\u044b\u0432\u043e\u0434\u044b"},{"location":"lab3/","text":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21163 \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0440\u0430\u0431\u043e\u0442\u044b \u0417\u0430\u0434\u0430\u043d\u0438\u0435 2. \u0411\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430 \u0421\u043e\u0437\u0434\u0430\u0442\u044c \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u043d\u0443\u044e \u0441\u0438\u0441\u0442\u0435\u043c\u0443, \u043f\u0440\u0435\u0434\u043d\u0430\u0437\u043d\u0430\u0447\u0435\u043d\u043d\u0443\u044e \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u043d\u0438\u043a\u043e\u0432 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438. \u0422\u0430\u043a\u0430\u044f \u0441\u0438\u0441\u0442\u0435\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0438\u0432\u0430\u0442\u044c \u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u0441\u0432\u0435\u0434\u0435\u043d\u0438\u0439 \u043e\u0431 \u0438\u043c\u0435\u044e\u0449\u0438\u0445\u0441\u044f \u0432 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0435 \u043a\u043d\u0438\u0433\u0430\u0445, \u043e \u0447\u0438\u0442\u0430\u0442\u0435\u043b\u044f\u0445 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 \u0438 \u0447\u0438\u0442\u0430\u043b\u044c\u043d\u044b\u0445 \u0437\u0430\u043b\u0430\u0445. \u0414\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0439 \u043a\u043d\u0438\u0433\u0438 \u0432 \u0411\u0414 \u0434\u043e\u043b\u0436\u043d\u044b \u0445\u0440\u0430\u043d\u0438\u0442\u044c\u0441\u044f \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u0441\u0432\u0435\u0434\u0435\u043d\u0438\u044f: \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u043a\u043d\u0438\u0433\u0438, \u0430\u0432\u0442\u043e\u0440 (\u044b), \u0438\u0437\u0434\u0430\u0442\u0435\u043b\u044c\u0441\u0442\u0432\u043e, \u0433\u043e\u0434 \u0438\u0437\u0434\u0430\u043d\u0438\u044f, \u0440\u0430\u0437\u0434\u0435\u043b, \u0447\u0438\u0441\u043b\u043e \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u043e\u0432 \u044d\u0442\u043e\u0439 \u043a\u043d\u0438\u0433\u0438 \u0432 \u043a\u0430\u0436\u0434\u043e\u043c \u0437\u0430\u043b\u0435 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438, \u0430 \u0442\u0430\u043a\u0436\u0435 \u0448\u0438\u0444\u0440 \u043a\u043d\u0438\u0433\u0438 \u0438 \u0434\u0430\u0442\u0430 \u0437\u0430\u043a\u0440\u0435\u043f\u043b\u0435\u043d\u0438\u044f \u043a\u043d\u0438\u0433\u0438 \u0437\u0430 \u0447\u0438\u0442\u0430\u0442\u0435\u043b\u0435\u043c. \u041a\u043d\u0438\u0433\u0438 \u043c\u043e\u0433\u0443\u0442 \u043f\u0435\u0440\u0435\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0432 \u0434\u0440\u0443\u0433\u043e\u043c \u0437\u0430\u043b\u0435. \u0421\u0432\u0435\u0434\u0435\u043d\u0438\u044f \u043e \u0447\u0438\u0442\u0430\u0442\u0435\u043b\u044f\u0445 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 \u0434\u043e\u043b\u0436\u043d\u044b \u0432\u043a\u043b\u044e\u0447\u0430\u0442\u044c \u043d\u043e\u043c\u0435\u0440 \u0447\u0438\u0442\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0433\u043e \u0431\u0438\u043b\u0435\u0442\u0430, \u0424\u0418\u041e \u0447\u0438\u0442\u0430\u0442\u0435\u043b\u044f, \u043d\u043e\u043c\u0435\u0440 \u043f\u0430\u0441\u043f\u043e\u0440\u0442\u0430, \u0434\u0430\u0442\u0443 \u0440\u043e\u0436\u0434\u0435\u043d\u0438\u044f, \u0430\u0434\u0440\u0435\u0441, \u043d\u043e\u043c\u0435\u0440 \u0442\u0435\u043b\u0435\u0444\u043e\u043d\u0430, \u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u0435, \u043d\u0430\u043b\u0438\u0447\u0438\u0435 \u0443\u0447\u0435\u043d\u043e\u0439 \u0441\u0442\u0435\u043f\u0435\u043d\u0438. \u0427\u0438\u0442\u0430\u0442\u0435\u043b\u0438 \u0437\u0430\u043a\u0440\u0435\u043f\u043b\u044f\u044e\u0442\u0441\u044f \u0437\u0430 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u043c \u0437\u0430\u043b\u043e\u043c, \u043c\u043e\u0433\u0443\u0442 \u043f\u0435\u0440\u0435\u043f\u0438\u0441\u0430\u0442\u044c\u0441\u044f \u0432 \u0434\u0440\u0443\u0433\u043e\u0439 \u0437\u0430\u043b \u0438 \u043c\u043e\u0433\u0443\u0442 \u0437\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u0442\u044c\u0441\u044f \u0438 \u0432\u044b\u043f\u0438\u0441\u044b\u0432\u0430\u0442\u044c\u0441\u044f \u0438\u0437 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438. \u0411\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430 \u0438\u043c\u0435\u0435\u0442 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0447\u0438\u0442\u0430\u043b\u044c\u043d\u044b\u0445 \u0437\u0430\u043b\u043e\u0432, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0445\u0430\u0440\u0430\u043a\u0442\u0435\u0440\u0438\u0437\u0443\u044e\u0442\u0441\u044f \u043d\u043e\u043c\u0435\u0440\u043e\u043c, \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435\u043c \u0438 \u0432\u043c\u0435\u0441\u0442\u0438\u043c\u043e\u0441\u0442\u044c\u044e, \u0442\u043e \u0435\u0441\u0442\u044c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e\u043c \u043b\u044e\u0434\u0435\u0439, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043c\u043e\u0433\u0443\u0442 \u043e\u0434\u043d\u043e\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u043e \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0432 \u0437\u0430\u043b\u0435. \u0411\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430 \u043c\u043e\u0436\u0435\u0442 \u043f\u043e\u043b\u0443\u0447\u0430\u0442\u044c \u043d\u043e\u0432\u044b\u0435 \u043a\u043d\u0438\u0433\u0438 \u0438 \u0441\u043f\u0438\u0441\u044b\u0432\u0430\u0442\u044c \u0441\u0442\u0430\u0440\u044b\u0435. \u0428\u0438\u0444\u0440 \u043a\u043d\u0438\u0433\u0438 \u043c\u043e\u0436\u0435\u0442 \u0438\u0437\u043c\u0435\u043d\u0438\u0442\u044c\u0441\u044f \u0432 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0435 \u043f\u0435\u0440\u0435\u043a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438, \u0430 \u043d\u043e\u043c\u0435\u0440 \u0447\u0438\u0442\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0433\u043e \u0431\u0438\u043b\u0435\u0442\u0430 \u0432 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0435 \u043f\u0435\u0440\u0435\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438. \u041e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u0444\u0430\u0439\u043b\u044b \u0441 \u043a\u043e\u0434\u043e\u043c models.py - \u0441\u0443\u0449\u043d\u043e\u0441\u0442\u0438 \u0431\u0430\u0437\u044b from django.db import models from django.contrib.auth.models import User from django.db.models.deletion import CASCADE class User(User): phone = models.CharField(verbose_name='\u0422\u0435\u043b\u0435\u0444\u043e\u043d', max_length=15, null=True, blank=True) REQUIRED_FIELDS = ['first_name', 'last_name', 'phone'] class Instance(models.Model): id_instance = models.AutoField(\"ID_\u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u0430\", primary_key=True) section = models.CharField(max_length=20, verbose_name='\u0420\u0430\u0437\u0434\u0435\u043b') code = models.CharField(max_length=20, verbose_name='\u041a\u043e\u0434') year = models.IntegerField(verbose_name='\u0413\u043e\u0434 \u0438\u0437\u0434\u0430\u043d\u0438\u044f') conditions = ( ('\u0445', '\u0445\u043e\u0440\u043e\u0448\u0435\u0435'), ('\u0443', '\u0443\u0434\u043e\u0432\u043b\u0435\u0442\u0432\u043e\u0440\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0435'), ('\u0441', '\u0441\u0442\u0430\u0440\u043e\u0435'), ) condition = models.CharField(max_length=1, choices=conditions, verbose_name='\u0421\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435 \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u0430') book = models.ForeignKey('Book', verbose_name='\u041a\u043d\u0438\u0433\u0430', on_delete=CASCADE) class Book(models.Model): id_book = models.AutoField(\"ID_\u043a\u043d\u0438\u0433\u0438\", primary_key=True) name = models.CharField(max_length=50, verbose_name='\u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435') author = models.CharField(max_length=70, verbose_name=\"\u0424\u0418\u041e \u0430\u0432\u0442\u043e\u0440\u0430\") publisher = models.CharField(max_length=30, verbose_name='\u0418\u0437\u0434\u0430\u0442\u0435\u043b\u044c\u0441\u0442\u0432\u043e') class Reader(models.Model): ticket = models.CharField(max_length=20, verbose_name='\u041d\u043e\u043c\u0435\u0440 \u0447\u0438\u0442\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0433\u043e \u0431\u0438\u043b\u0435\u0442\u0430') name = models.CharField(max_length=70, verbose_name=\"\u0424\u0418\u041e\") passport = models.CharField(max_length=20, verbose_name='\u041d\u043e\u043c\u0435\u0440 \u043f\u0430\u0441\u043f\u043e\u0440\u0442\u0430') birth_date = models.DateField(verbose_name='\u0414\u0430\u0442\u0430 \u0440\u043e\u0436\u0434\u0435\u043d\u0438\u044f') address = models.CharField(max_length=100, verbose_name='\u0410\u0434\u0440\u0435\u0441') phone_number = models.CharField(max_length=20, verbose_name='\u041d\u043e\u043c\u0435\u0440 \u0442\u0435\u043b\u0435\u0444\u043e\u043d\u0430') educations = ( ('\u043d', '\u043d\u0430\u0447\u0430\u043b\u044c\u043d\u043e\u0435'), ('\u0441', '\u0441\u0440\u0435\u0434\u043d\u0435\u0435'), ('\u0432', '\u0432\u044b\u0441\u0448\u0435\u0435'), ) education = models.CharField(max_length=1, choices=educations, verbose_name='\u041e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u0435') degree = models.BooleanField(default=False, verbose_name='\u041d\u0430\u043b\u0438\u0447\u0438\u0435 \u0443\u0447\u0435\u043d\u043e\u0439 \u0441\u0442\u0435\u043f\u0435\u043d\u0438') registration_date = models.DateField(verbose_name='\u0414\u0430\u0442\u0430 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438') instances = models.ManyToManyField('Instance', verbose_name='\u0412\u0437\u044f\u0442\u044b\u0435 \u043a\u043d\u0438\u0433\u0438', through='ReaderBook', related_name='reader_book') room = models.ForeignKey('Room', verbose_name='\u0417\u0430\u043b, \u0437\u0430 \u043a\u043e\u0442\u043e\u0440\u044b\u043c \u0437\u0430\u043a\u0440\u0435\u043f\u043b\u0435\u043d \u0447\u0438\u0442\u0430\u0442\u0435\u043b\u044c', on_delete=CASCADE, null=True) class ReaderRoom(models.Model): reader = models.ForeignKey('Reader', verbose_name='\u0427\u0438\u0442\u0430\u0442\u0435\u043b\u044c', on_delete=CASCADE) room = models.ForeignKey('Room', verbose_name='\u0417\u0430\u043b', on_delete=CASCADE) date = models.DateField(verbose_name='\u0414\u0430\u0442\u0430 \u0437\u0430\u043a\u0440\u0435\u043f\u043b\u0435\u043d\u0438\u044f \u0437\u0430\u043b\u0430', null=True) class BookInst(models.Model): inst = models.ForeignKey('Instance', verbose_name='\u042d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440', on_delete=CASCADE) book = models.ForeignKey('Book', verbose_name='\u041a\u043d\u0438\u0433\u0430', on_delete=CASCADE) class ReaderBook(models.Model): reader = models.ForeignKey('Reader', verbose_name='\u0427\u0438\u0442\u0430\u0442\u0435\u043b\u044c', on_delete=CASCADE) book = models.ForeignKey('Instance', verbose_name='\u042d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440', on_delete=CASCADE) date = models.DateField(verbose_name='\u0414\u0430\u0442\u0430 \u0432\u044b\u0434\u0430\u0447\u0438 \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u0430 \u043a\u043d\u0438\u0433\u0438', null=True) class BookRoom(models.Model): book = models.ForeignKey('Instance', verbose_name='\u041a\u043d\u0438\u0433\u0430', on_delete=CASCADE) room = models.ForeignKey('Room', verbose_name='\u0417\u0430\u043b', on_delete=CASCADE) class Room(models.Model): name = models.CharField(max_length=20, verbose_name='\u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435') capacity = models.IntegerField(verbose_name='\u0412\u043c\u0435\u0441\u0442\u0438\u043c\u043e\u0441\u0442\u044c \u043a\u043e\u043c\u043d\u0430\u0442\u044b') books = models.ManyToManyField('Instance', verbose_name='\u041a\u043d\u0438\u0433\u0438', through='BookRoom', related_name='book_room') views.py - \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b from rest_framework import generics from rest_framework.permissions import IsAuthenticated, AllowAny from .models import * from .serializers import * class ReaderListCreateView(generics.ListCreateAPIView): queryset = Reader.objects.all() serializer_class = ReaderSerializer permission_classes = [IsAuthenticated] class ReaderDetailView(generics.RetrieveUpdateDestroyAPIView): queryset = Reader.objects.all() serializer_class = ReaderSerializer permission_classes = [IsAuthenticated] class BookListCreateView(generics.ListCreateAPIView): queryset = Book.objects.all() serializer_class = BookSerializer permission_classes = [IsAuthenticated] class BookDetailView(generics.RetrieveUpdateDestroyAPIView): queryset = Book.objects.all() serializer_class = BookSerializer permission_classes = [IsAuthenticated] class InstanceListCreateView(generics.ListCreateAPIView): queryset = Instance.objects.all() serializer_class = InstanceSerializer permission_classes = [IsAuthenticated] class InstanceDetailView(generics.RetrieveUpdateDestroyAPIView): queryset = Instance.objects.all() serializer_class = InstanceSerializer permission_classes = [IsAuthenticated] class ReaderBookListCreateView(generics.ListCreateAPIView): queryset = ReaderBook.objects.all() serializer_class = ReaderBookSerializer permission_classes = [IsAuthenticated] class ReaderBookDetailView(generics.RetrieveUpdateDestroyAPIView): queryset = ReaderBook.objects.all() serializer_class = ReaderBookSerializer permission_classes = [IsAuthenticated] class RoomListCreateView(generics.ListCreateAPIView): queryset = Room.objects.all() serializer_class = RoomSerializer permission_classes = [IsAuthenticated] class RoomDetailView(generics.RetrieveUpdateDestroyAPIView): queryset = Room.objects.all() serializer_class = RoomSerializer permission_classes = [IsAuthenticated] class BookRoomListCreateView(generics.ListCreateAPIView): queryset = BookRoom.objects.all() serializer_class = BookRoomSerializer permission_classes = [IsAuthenticated] class BookRoomDetailView(generics.RetrieveUpdateDestroyAPIView): queryset = BookRoom.objects.all() serializer_class = BookRoomSerializer permission_classes = [IsAuthenticated] class ReaderRoomListCreateView(generics.ListCreateAPIView): queryset = ReaderRoom.objects.all() serializer_class = ReaderRoomSerializer permission_classes = [IsAuthenticated] class ReaderRoomDetailView(generics.RetrieveUpdateDestroyAPIView): queryset = ReaderRoom.objects.all() serializer_class = ReaderRoomSerializer permission_classes = [IsAuthenticated] class BookInstListCreateView(generics.ListCreateAPIView): queryset = BookInst.objects.all() serializer_class = BookInstSerializer permission_classes = [IsAuthenticated] class BookInstDetailView(generics.RetrieveUpdateDestroyAPIView): queryset = BookInst.objects.all() serializer_class = BookInstSerializer permission_classes = [IsAuthenticated] serializers.py - \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u0411\u0414 \u0432 \u043d\u0430\u0442\u0438\u0432\u043d\u044b\u0435 \u0442\u0438\u043f\u044b \u0434\u0430\u043d\u043d\u044b\u0445 Python from rest_framework import serializers from .models import * class ReaderSerializer(serializers.ModelSerializer): books = serializers.SlugRelatedField(read_only=True, many=True, slug_field='books') class Meta: model = Reader fields = \"__all__\" class BookSerializer(serializers.ModelSerializer): class Meta: model = Book fields = \"__all__\" class InstanceSerializer(serializers.ModelSerializer): class Meta: model = Instance fields = \"__all__\" class ReaderBookSerializer(serializers.ModelSerializer): class Meta: model = ReaderBook fields = \"__all__\" class RoomSerializer(serializers.ModelSerializer): books = serializers.SlugRelatedField(read_only=True, many=True, slug_field='name') class Meta: model = Room fields = \"__all__\" class BookRoomSerializer(serializers.ModelSerializer): class Meta: model = BookRoom fields = \"__all__\" class ReaderRoomSerializer(serializers.ModelSerializer): class Meta: model = ReaderRoom fields = \"__all__\" class BookInstSerializer(serializers.ModelSerializer): class Meta: model = BookInst fields = \"__all__\" urls.py - \u044e\u0440\u043b\u044b \u0430\u0434\u0440\u0435\u0441\u043e\u0432 \u043d\u0430\u0448\u0435\u0433\u043e \u0441\u0430\u0439\u0442\u0430 from django.urls import path from .views import ( ReaderListCreateView, ReaderDetailView, BookListCreateView, BookDetailView, InstanceListCreateView, InstanceDetailView, ReaderBookListCreateView, ReaderBookDetailView, RoomListCreateView, RoomDetailView, BookRoomListCreateView, BookRoomDetailView, BookInstListCreateView, BookInstDetailView, ReaderRoomListCreateView,ReaderRoomDetailView ) urlpatterns = [ path('readers/', ReaderListCreateView.as_view(), name='readers-list-create'), path('readers/<int:pk>/', ReaderDetailView.as_view(), name='readers-detail'), path('instances/', InstanceListCreateView.as_view(), name='instances-list-create'), path('instances/<int:pk>/', InstanceDetailView.as_view(), name='instances-detail'), path('readerbooks/', ReaderBookListCreateView.as_view(), name='readerbooks-list-create'), path('readerbooks/<int:pk>/', ReaderBookDetailView.as_view(), name='readerbooks-detail'), path('roomlists/', RoomListCreateView.as_view(), name='roomlists-list-create'), path('roomlists/<int:pk>/', RoomDetailView.as_view(), name='roomlists-detail'), path('bookrooms/', BookRoomListCreateView.as_view(), name='bookrooms-list-create'), path('bookrooms/<int:pk>/', BookRoomDetailView.as_view(), name='bookrooms-detail'), path('bookinsts/', BookInstListCreateView.as_view(), name='bookinsts-list-create'), path('bookinsts/<int:pk>/', BookInstDetailView.as_view(), name='bookinsts-detail'), path('readerooms/', ReaderRoomListCreateView.as_view(), name='readerooms-list-create'), path('readerooms/<int:pk>/', ReaderRoomDetailView.as_view(), name='readerooms-detail'), path('books/', BookListCreateView.as_view(), name='books-list-create'), path('books/<int:pk>/', BookDetailView.as_view(), name='books-detail'), ]","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21163"},{"location":"lab3/#no3","text":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0440\u0430\u0431\u043e\u0442\u044b \u0417\u0430\u0434\u0430\u043d\u0438\u0435 2. \u0411\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430 \u0421\u043e\u0437\u0434\u0430\u0442\u044c \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u043d\u0443\u044e \u0441\u0438\u0441\u0442\u0435\u043c\u0443, \u043f\u0440\u0435\u0434\u043d\u0430\u0437\u043d\u0430\u0447\u0435\u043d\u043d\u0443\u044e \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u043d\u0438\u043a\u043e\u0432 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438. \u0422\u0430\u043a\u0430\u044f \u0441\u0438\u0441\u0442\u0435\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0438\u0432\u0430\u0442\u044c \u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u0441\u0432\u0435\u0434\u0435\u043d\u0438\u0439 \u043e\u0431 \u0438\u043c\u0435\u044e\u0449\u0438\u0445\u0441\u044f \u0432 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0435 \u043a\u043d\u0438\u0433\u0430\u0445, \u043e \u0447\u0438\u0442\u0430\u0442\u0435\u043b\u044f\u0445 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 \u0438 \u0447\u0438\u0442\u0430\u043b\u044c\u043d\u044b\u0445 \u0437\u0430\u043b\u0430\u0445. \u0414\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0439 \u043a\u043d\u0438\u0433\u0438 \u0432 \u0411\u0414 \u0434\u043e\u043b\u0436\u043d\u044b \u0445\u0440\u0430\u043d\u0438\u0442\u044c\u0441\u044f \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u0441\u0432\u0435\u0434\u0435\u043d\u0438\u044f: \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u043a\u043d\u0438\u0433\u0438, \u0430\u0432\u0442\u043e\u0440 (\u044b), \u0438\u0437\u0434\u0430\u0442\u0435\u043b\u044c\u0441\u0442\u0432\u043e, \u0433\u043e\u0434 \u0438\u0437\u0434\u0430\u043d\u0438\u044f, \u0440\u0430\u0437\u0434\u0435\u043b, \u0447\u0438\u0441\u043b\u043e \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u043e\u0432 \u044d\u0442\u043e\u0439 \u043a\u043d\u0438\u0433\u0438 \u0432 \u043a\u0430\u0436\u0434\u043e\u043c \u0437\u0430\u043b\u0435 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438, \u0430 \u0442\u0430\u043a\u0436\u0435 \u0448\u0438\u0444\u0440 \u043a\u043d\u0438\u0433\u0438 \u0438 \u0434\u0430\u0442\u0430 \u0437\u0430\u043a\u0440\u0435\u043f\u043b\u0435\u043d\u0438\u044f \u043a\u043d\u0438\u0433\u0438 \u0437\u0430 \u0447\u0438\u0442\u0430\u0442\u0435\u043b\u0435\u043c. \u041a\u043d\u0438\u0433\u0438 \u043c\u043e\u0433\u0443\u0442 \u043f\u0435\u0440\u0435\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0432 \u0434\u0440\u0443\u0433\u043e\u043c \u0437\u0430\u043b\u0435. \u0421\u0432\u0435\u0434\u0435\u043d\u0438\u044f \u043e \u0447\u0438\u0442\u0430\u0442\u0435\u043b\u044f\u0445 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 \u0434\u043e\u043b\u0436\u043d\u044b \u0432\u043a\u043b\u044e\u0447\u0430\u0442\u044c \u043d\u043e\u043c\u0435\u0440 \u0447\u0438\u0442\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0433\u043e \u0431\u0438\u043b\u0435\u0442\u0430, \u0424\u0418\u041e \u0447\u0438\u0442\u0430\u0442\u0435\u043b\u044f, \u043d\u043e\u043c\u0435\u0440 \u043f\u0430\u0441\u043f\u043e\u0440\u0442\u0430, \u0434\u0430\u0442\u0443 \u0440\u043e\u0436\u0434\u0435\u043d\u0438\u044f, \u0430\u0434\u0440\u0435\u0441, \u043d\u043e\u043c\u0435\u0440 \u0442\u0435\u043b\u0435\u0444\u043e\u043d\u0430, \u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u0435, \u043d\u0430\u043b\u0438\u0447\u0438\u0435 \u0443\u0447\u0435\u043d\u043e\u0439 \u0441\u0442\u0435\u043f\u0435\u043d\u0438. \u0427\u0438\u0442\u0430\u0442\u0435\u043b\u0438 \u0437\u0430\u043a\u0440\u0435\u043f\u043b\u044f\u044e\u0442\u0441\u044f \u0437\u0430 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u043c \u0437\u0430\u043b\u043e\u043c, \u043c\u043e\u0433\u0443\u0442 \u043f\u0435\u0440\u0435\u043f\u0438\u0441\u0430\u0442\u044c\u0441\u044f \u0432 \u0434\u0440\u0443\u0433\u043e\u0439 \u0437\u0430\u043b \u0438 \u043c\u043e\u0433\u0443\u0442 \u0437\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u0442\u044c\u0441\u044f \u0438 \u0432\u044b\u043f\u0438\u0441\u044b\u0432\u0430\u0442\u044c\u0441\u044f \u0438\u0437 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438. \u0411\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430 \u0438\u043c\u0435\u0435\u0442 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0447\u0438\u0442\u0430\u043b\u044c\u043d\u044b\u0445 \u0437\u0430\u043b\u043e\u0432, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0445\u0430\u0440\u0430\u043a\u0442\u0435\u0440\u0438\u0437\u0443\u044e\u0442\u0441\u044f \u043d\u043e\u043c\u0435\u0440\u043e\u043c, \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435\u043c \u0438 \u0432\u043c\u0435\u0441\u0442\u0438\u043c\u043e\u0441\u0442\u044c\u044e, \u0442\u043e \u0435\u0441\u0442\u044c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e\u043c \u043b\u044e\u0434\u0435\u0439, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043c\u043e\u0433\u0443\u0442 \u043e\u0434\u043d\u043e\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u043e \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0432 \u0437\u0430\u043b\u0435. \u0411\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430 \u043c\u043e\u0436\u0435\u0442 \u043f\u043e\u043b\u0443\u0447\u0430\u0442\u044c \u043d\u043e\u0432\u044b\u0435 \u043a\u043d\u0438\u0433\u0438 \u0438 \u0441\u043f\u0438\u0441\u044b\u0432\u0430\u0442\u044c \u0441\u0442\u0430\u0440\u044b\u0435. \u0428\u0438\u0444\u0440 \u043a\u043d\u0438\u0433\u0438 \u043c\u043e\u0436\u0435\u0442 \u0438\u0437\u043c\u0435\u043d\u0438\u0442\u044c\u0441\u044f \u0432 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0435 \u043f\u0435\u0440\u0435\u043a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438, \u0430 \u043d\u043e\u043c\u0435\u0440 \u0447\u0438\u0442\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0433\u043e \u0431\u0438\u043b\u0435\u0442\u0430 \u0432 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0435 \u043f\u0435\u0440\u0435\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438.","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21163"},{"location":"lab3/#_1","text":"models.py - \u0441\u0443\u0449\u043d\u043e\u0441\u0442\u0438 \u0431\u0430\u0437\u044b from django.db import models from django.contrib.auth.models import User from django.db.models.deletion import CASCADE class User(User): phone = models.CharField(verbose_name='\u0422\u0435\u043b\u0435\u0444\u043e\u043d', max_length=15, null=True, blank=True) REQUIRED_FIELDS = ['first_name', 'last_name', 'phone'] class Instance(models.Model): id_instance = models.AutoField(\"ID_\u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u0430\", primary_key=True) section = models.CharField(max_length=20, verbose_name='\u0420\u0430\u0437\u0434\u0435\u043b') code = models.CharField(max_length=20, verbose_name='\u041a\u043e\u0434') year = models.IntegerField(verbose_name='\u0413\u043e\u0434 \u0438\u0437\u0434\u0430\u043d\u0438\u044f') conditions = ( ('\u0445', '\u0445\u043e\u0440\u043e\u0448\u0435\u0435'), ('\u0443', '\u0443\u0434\u043e\u0432\u043b\u0435\u0442\u0432\u043e\u0440\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0435'), ('\u0441', '\u0441\u0442\u0430\u0440\u043e\u0435'), ) condition = models.CharField(max_length=1, choices=conditions, verbose_name='\u0421\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435 \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u0430') book = models.ForeignKey('Book', verbose_name='\u041a\u043d\u0438\u0433\u0430', on_delete=CASCADE) class Book(models.Model): id_book = models.AutoField(\"ID_\u043a\u043d\u0438\u0433\u0438\", primary_key=True) name = models.CharField(max_length=50, verbose_name='\u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435') author = models.CharField(max_length=70, verbose_name=\"\u0424\u0418\u041e \u0430\u0432\u0442\u043e\u0440\u0430\") publisher = models.CharField(max_length=30, verbose_name='\u0418\u0437\u0434\u0430\u0442\u0435\u043b\u044c\u0441\u0442\u0432\u043e') class Reader(models.Model): ticket = models.CharField(max_length=20, verbose_name='\u041d\u043e\u043c\u0435\u0440 \u0447\u0438\u0442\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0433\u043e \u0431\u0438\u043b\u0435\u0442\u0430') name = models.CharField(max_length=70, verbose_name=\"\u0424\u0418\u041e\") passport = models.CharField(max_length=20, verbose_name='\u041d\u043e\u043c\u0435\u0440 \u043f\u0430\u0441\u043f\u043e\u0440\u0442\u0430') birth_date = models.DateField(verbose_name='\u0414\u0430\u0442\u0430 \u0440\u043e\u0436\u0434\u0435\u043d\u0438\u044f') address = models.CharField(max_length=100, verbose_name='\u0410\u0434\u0440\u0435\u0441') phone_number = models.CharField(max_length=20, verbose_name='\u041d\u043e\u043c\u0435\u0440 \u0442\u0435\u043b\u0435\u0444\u043e\u043d\u0430') educations = ( ('\u043d', '\u043d\u0430\u0447\u0430\u043b\u044c\u043d\u043e\u0435'), ('\u0441', '\u0441\u0440\u0435\u0434\u043d\u0435\u0435'), ('\u0432', '\u0432\u044b\u0441\u0448\u0435\u0435'), ) education = models.CharField(max_length=1, choices=educations, verbose_name='\u041e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u0435') degree = models.BooleanField(default=False, verbose_name='\u041d\u0430\u043b\u0438\u0447\u0438\u0435 \u0443\u0447\u0435\u043d\u043e\u0439 \u0441\u0442\u0435\u043f\u0435\u043d\u0438') registration_date = models.DateField(verbose_name='\u0414\u0430\u0442\u0430 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438') instances = models.ManyToManyField('Instance', verbose_name='\u0412\u0437\u044f\u0442\u044b\u0435 \u043a\u043d\u0438\u0433\u0438', through='ReaderBook', related_name='reader_book') room = models.ForeignKey('Room', verbose_name='\u0417\u0430\u043b, \u0437\u0430 \u043a\u043e\u0442\u043e\u0440\u044b\u043c \u0437\u0430\u043a\u0440\u0435\u043f\u043b\u0435\u043d \u0447\u0438\u0442\u0430\u0442\u0435\u043b\u044c', on_delete=CASCADE, null=True) class ReaderRoom(models.Model): reader = models.ForeignKey('Reader', verbose_name='\u0427\u0438\u0442\u0430\u0442\u0435\u043b\u044c', on_delete=CASCADE) room = models.ForeignKey('Room', verbose_name='\u0417\u0430\u043b', on_delete=CASCADE) date = models.DateField(verbose_name='\u0414\u0430\u0442\u0430 \u0437\u0430\u043a\u0440\u0435\u043f\u043b\u0435\u043d\u0438\u044f \u0437\u0430\u043b\u0430', null=True) class BookInst(models.Model): inst = models.ForeignKey('Instance', verbose_name='\u042d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440', on_delete=CASCADE) book = models.ForeignKey('Book', verbose_name='\u041a\u043d\u0438\u0433\u0430', on_delete=CASCADE) class ReaderBook(models.Model): reader = models.ForeignKey('Reader', verbose_name='\u0427\u0438\u0442\u0430\u0442\u0435\u043b\u044c', on_delete=CASCADE) book = models.ForeignKey('Instance', verbose_name='\u042d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440', on_delete=CASCADE) date = models.DateField(verbose_name='\u0414\u0430\u0442\u0430 \u0432\u044b\u0434\u0430\u0447\u0438 \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u0430 \u043a\u043d\u0438\u0433\u0438', null=True) class BookRoom(models.Model): book = models.ForeignKey('Instance', verbose_name='\u041a\u043d\u0438\u0433\u0430', on_delete=CASCADE) room = models.ForeignKey('Room', verbose_name='\u0417\u0430\u043b', on_delete=CASCADE) class Room(models.Model): name = models.CharField(max_length=20, verbose_name='\u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435') capacity = models.IntegerField(verbose_name='\u0412\u043c\u0435\u0441\u0442\u0438\u043c\u043e\u0441\u0442\u044c \u043a\u043e\u043c\u043d\u0430\u0442\u044b') books = models.ManyToManyField('Instance', verbose_name='\u041a\u043d\u0438\u0433\u0438', through='BookRoom', related_name='book_room') views.py - \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b from rest_framework import generics from rest_framework.permissions import IsAuthenticated, AllowAny from .models import * from .serializers import * class ReaderListCreateView(generics.ListCreateAPIView): queryset = Reader.objects.all() serializer_class = ReaderSerializer permission_classes = [IsAuthenticated] class ReaderDetailView(generics.RetrieveUpdateDestroyAPIView): queryset = Reader.objects.all() serializer_class = ReaderSerializer permission_classes = [IsAuthenticated] class BookListCreateView(generics.ListCreateAPIView): queryset = Book.objects.all() serializer_class = BookSerializer permission_classes = [IsAuthenticated] class BookDetailView(generics.RetrieveUpdateDestroyAPIView): queryset = Book.objects.all() serializer_class = BookSerializer permission_classes = [IsAuthenticated] class InstanceListCreateView(generics.ListCreateAPIView): queryset = Instance.objects.all() serializer_class = InstanceSerializer permission_classes = [IsAuthenticated] class InstanceDetailView(generics.RetrieveUpdateDestroyAPIView): queryset = Instance.objects.all() serializer_class = InstanceSerializer permission_classes = [IsAuthenticated] class ReaderBookListCreateView(generics.ListCreateAPIView): queryset = ReaderBook.objects.all() serializer_class = ReaderBookSerializer permission_classes = [IsAuthenticated] class ReaderBookDetailView(generics.RetrieveUpdateDestroyAPIView): queryset = ReaderBook.objects.all() serializer_class = ReaderBookSerializer permission_classes = [IsAuthenticated] class RoomListCreateView(generics.ListCreateAPIView): queryset = Room.objects.all() serializer_class = RoomSerializer permission_classes = [IsAuthenticated] class RoomDetailView(generics.RetrieveUpdateDestroyAPIView): queryset = Room.objects.all() serializer_class = RoomSerializer permission_classes = [IsAuthenticated] class BookRoomListCreateView(generics.ListCreateAPIView): queryset = BookRoom.objects.all() serializer_class = BookRoomSerializer permission_classes = [IsAuthenticated] class BookRoomDetailView(generics.RetrieveUpdateDestroyAPIView): queryset = BookRoom.objects.all() serializer_class = BookRoomSerializer permission_classes = [IsAuthenticated] class ReaderRoomListCreateView(generics.ListCreateAPIView): queryset = ReaderRoom.objects.all() serializer_class = ReaderRoomSerializer permission_classes = [IsAuthenticated] class ReaderRoomDetailView(generics.RetrieveUpdateDestroyAPIView): queryset = ReaderRoom.objects.all() serializer_class = ReaderRoomSerializer permission_classes = [IsAuthenticated] class BookInstListCreateView(generics.ListCreateAPIView): queryset = BookInst.objects.all() serializer_class = BookInstSerializer permission_classes = [IsAuthenticated] class BookInstDetailView(generics.RetrieveUpdateDestroyAPIView): queryset = BookInst.objects.all() serializer_class = BookInstSerializer permission_classes = [IsAuthenticated] serializers.py - \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u0411\u0414 \u0432 \u043d\u0430\u0442\u0438\u0432\u043d\u044b\u0435 \u0442\u0438\u043f\u044b \u0434\u0430\u043d\u043d\u044b\u0445 Python from rest_framework import serializers from .models import * class ReaderSerializer(serializers.ModelSerializer): books = serializers.SlugRelatedField(read_only=True, many=True, slug_field='books') class Meta: model = Reader fields = \"__all__\" class BookSerializer(serializers.ModelSerializer): class Meta: model = Book fields = \"__all__\" class InstanceSerializer(serializers.ModelSerializer): class Meta: model = Instance fields = \"__all__\" class ReaderBookSerializer(serializers.ModelSerializer): class Meta: model = ReaderBook fields = \"__all__\" class RoomSerializer(serializers.ModelSerializer): books = serializers.SlugRelatedField(read_only=True, many=True, slug_field='name') class Meta: model = Room fields = \"__all__\" class BookRoomSerializer(serializers.ModelSerializer): class Meta: model = BookRoom fields = \"__all__\" class ReaderRoomSerializer(serializers.ModelSerializer): class Meta: model = ReaderRoom fields = \"__all__\" class BookInstSerializer(serializers.ModelSerializer): class Meta: model = BookInst fields = \"__all__\" urls.py - \u044e\u0440\u043b\u044b \u0430\u0434\u0440\u0435\u0441\u043e\u0432 \u043d\u0430\u0448\u0435\u0433\u043e \u0441\u0430\u0439\u0442\u0430 from django.urls import path from .views import ( ReaderListCreateView, ReaderDetailView, BookListCreateView, BookDetailView, InstanceListCreateView, InstanceDetailView, ReaderBookListCreateView, ReaderBookDetailView, RoomListCreateView, RoomDetailView, BookRoomListCreateView, BookRoomDetailView, BookInstListCreateView, BookInstDetailView, ReaderRoomListCreateView,ReaderRoomDetailView ) urlpatterns = [ path('readers/', ReaderListCreateView.as_view(), name='readers-list-create'), path('readers/<int:pk>/', ReaderDetailView.as_view(), name='readers-detail'), path('instances/', InstanceListCreateView.as_view(), name='instances-list-create'), path('instances/<int:pk>/', InstanceDetailView.as_view(), name='instances-detail'), path('readerbooks/', ReaderBookListCreateView.as_view(), name='readerbooks-list-create'), path('readerbooks/<int:pk>/', ReaderBookDetailView.as_view(), name='readerbooks-detail'), path('roomlists/', RoomListCreateView.as_view(), name='roomlists-list-create'), path('roomlists/<int:pk>/', RoomDetailView.as_view(), name='roomlists-detail'), path('bookrooms/', BookRoomListCreateView.as_view(), name='bookrooms-list-create'), path('bookrooms/<int:pk>/', BookRoomDetailView.as_view(), name='bookrooms-detail'), path('bookinsts/', BookInstListCreateView.as_view(), name='bookinsts-list-create'), path('bookinsts/<int:pk>/', BookInstDetailView.as_view(), name='bookinsts-detail'), path('readerooms/', ReaderRoomListCreateView.as_view(), name='readerooms-list-create'), path('readerooms/<int:pk>/', ReaderRoomDetailView.as_view(), name='readerooms-detail'), path('books/', BookListCreateView.as_view(), name='books-list-create'), path('books/<int:pk>/', BookDetailView.as_view(), name='books-detail'), ]","title":"\u041e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u0444\u0430\u0439\u043b\u044b \u0441 \u043a\u043e\u0434\u043e\u043c"},{"location":"practice3/","text":"\u041f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21163 \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0440\u0430\u0431\u043e\u0442\u044b \u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u0437\u0430\u043f\u0440\u043e\u0441 \u043d\u0430 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 6-7 \u043d\u043e\u0432\u044b\u0445 \u0430\u0432\u0442\u043e\u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432 \u0438 5-6 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439, \u043a\u0430\u0436\u0434\u043e\u043c\u0443 \u0430\u0432\u0442\u043e\u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0443 \u043d\u0430\u0437\u043d\u0430\u0447\u044c\u0442\u0435 \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u0435 \u0438 \u043e\u0442 1 \u0434\u043e 3 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439. \u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u043c\u043e\u0436\u0435\u0442\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u043b\u0438\u0431\u043e \u0432 \u0438\u043d\u0442\u0435\u0440\u0430\u043a\u0442\u0438\u0432\u043d\u043e\u043c \u0440\u0435\u0436\u0438\u043c\u0435 \u0438\u043d\u0442\u0435\u0440\u043f\u0440\u0435\u0442\u0430\u0442\u043e\u0440\u0430, \u043b\u0438\u0431\u043e \u0432 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e\u043c python-\u0444\u0430\u0439\u043b\u0435. \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u043c \u0434\u043e\u043b\u0436\u043d\u044b \u0441\u0442\u0430\u0442\u044c \u0437\u0430\u043f\u0440\u043e\u0441\u044b \u0438 \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435 \u0441\u043e\u0437\u0434\u0430\u043d\u043d\u044b\u0445 \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432. \u041e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u0444\u0430\u0439\u043b\u044b \u0441 \u043a\u043e\u0434\u043e\u043c add_oblects - \u0437\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u043c\u0438 import os import django os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'django_project_babichev.settings') django.setup() from datetime import date from project_first_app.models import * # Owners first_names = ['Alice', 'John', 'Robert', 'Emily', 'Michael', 'Olivia'] last_names = ['Smith', 'Johnson', 'Williams', 'Jones', 'Brown', 'Davis'] birthdays = [date(1990, 5, 15), date(1985, 9, 10), date(1978, 4, 25), date(1992, 8, 5), date(1980, 1, 20), date(1995, 3, 12)] # Licences numbers = ['1111111111', '2222222222', '3333333333', '4444444444', '5555555555', '6666666666'] types = ['A', 'B', 'C', 'B', 'A', 'D'] dates = [date(2010, 1, 1), date(2012, 1, 1), date(2015, 1, 1), date(2018, 1, 1), date(2020, 1, 1), date(2022, 1, 1)] # Cars plates = ['ABC123', 'DEF456', 'GHI789', 'JKL012', 'MNO345', 'PQR678'] brands = ['Ford', 'Chevrolet', 'Toyota', 'Honda', 'Nissan', 'BMW'] models = ['Focus', 'Cruze', 'Corolla', 'Civic', 'Sentra', 'X5'] colors = ['Silver', 'Black', 'Red', 'Blue', 'White', 'Gray'] # Ownerships dfrom = [date(2010, 6, 1), date(2012, 4, 1), date(2015, 8, 1), date(2018, 2, 1), date(2020, 10, 1), date(2022, 3, 1)] duntil = [date(2011, 7, 1), date(2013, 6, 1), date(2016, 9, 11), date(2019, 3, 1), date(2021, 11, 1), date(2023, 4, 1)] for (fn, ln, b, n, t, d, p, br, m, c, df, du) in zip(first_names, last_names, birthdays, numbers, types, dates, plates, brands, models, colors, dfrom, duntil): o = Owner(first_name=fn, last_name=ln, birthday=b) o.save() l = License(owner=o, number=n, type=t, issue_date=d) l.save() c = Car(license_plate=p, brand=br, model=m, color=c) c.save() os = Ownership(owner=o, car=c, date_from=df, date_until=du) os.save() filter_obj_t2 - \u0437\u0430\u0434\u0430\u043d\u0438\u0435 2 import os import django os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'django_project_babichev.settings') django.setup() from datetime import date from project_first_app.models import * # All Toyotas toyotas = Car.objects.filter(brand='Toyota') print(\"All Toyota cars\") for t in toyotas: print(t.license_plate, t.brand, t.model, t.color) print() # All owners named John js = Owner.objects.filter(first_name='John') print(\"All owners named John\") for j in js: print(j.first_name, j.last_name) print() # Olivia Davis's license olivia = Owner.objects.get(first_name='Olivia').id license = License.objects.get(owner__id=olivia) print(\"Olivia Davis's license\") print(license.number, license.type, license.issue_date) print() # All owners of a black car blcar = Owner.objects.filter(as_car_owner__car__color='Black') print(\"All owners of a black car\") for b in blcar: print(b.first_name, b.last_name) print() # Ownership started in 2015 or later ownerships = Ownership.objects.filter(date_from__gte=date(2015, 1, 1)) print(\"All owners whose car ownership started in 2015 or later\") for o in ownerships: print(o.owner.first_name, o.owner.last_name, '-', o.car.license_plate, o.car.brand, o.car.model, o.car.color) print() agg_obj_t3.py - \u0437\u0430\u0434\u0430\u043d\u0438\u0435 3 import os import django os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'django_project_babichev.settings') django.setup() from datetime import date from django.db.models import Max, Count from project_first_app.models import * # Oldest license oldest = License.objects.order_by('issue_date')[0] print(\"The oldest license\") print(oldest.issue_date) print() # Latest ownership date max_dates = Ownership.objects.aggregate(Max('date_from'), Max('date_until')).values() print(\"The latest ownership date\") print(max(max_dates)) print() # Car count for all owners car_counter = Owner.objects.annotate(Count(\"owned_cars\")) print(\"Car count for all owners\") for cr in car_counter: print(cr.first_name, cr.last_name, cr.owned_cars__count) print() # Car count for every brand brand_counter = Car.objects.values('brand').annotate(Count('id')) print(\"Car count for every brand\") for bc in brand_counter: print(bc['brand'], bc['id__count']) print() # Owners ordered by license issue date ordered_license = Owner.objects.order_by(\"driver_license__issue_date\") print(\"Owners ordered by license issue date\") for ol in ordered_license: print(ol.first_name, ol.last_name) print()","title":"\u041f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21163"},{"location":"practice3/#no3","text":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0440\u0430\u0431\u043e\u0442\u044b \u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u0437\u0430\u043f\u0440\u043e\u0441 \u043d\u0430 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 6-7 \u043d\u043e\u0432\u044b\u0445 \u0430\u0432\u0442\u043e\u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432 \u0438 5-6 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439, \u043a\u0430\u0436\u0434\u043e\u043c\u0443 \u0430\u0432\u0442\u043e\u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0443 \u043d\u0430\u0437\u043d\u0430\u0447\u044c\u0442\u0435 \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u0435 \u0438 \u043e\u0442 1 \u0434\u043e 3 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439. \u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u043c\u043e\u0436\u0435\u0442\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u043b\u0438\u0431\u043e \u0432 \u0438\u043d\u0442\u0435\u0440\u0430\u043a\u0442\u0438\u0432\u043d\u043e\u043c \u0440\u0435\u0436\u0438\u043c\u0435 \u0438\u043d\u0442\u0435\u0440\u043f\u0440\u0435\u0442\u0430\u0442\u043e\u0440\u0430, \u043b\u0438\u0431\u043e \u0432 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e\u043c python-\u0444\u0430\u0439\u043b\u0435. \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u043c \u0434\u043e\u043b\u0436\u043d\u044b \u0441\u0442\u0430\u0442\u044c \u0437\u0430\u043f\u0440\u043e\u0441\u044b \u0438 \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435 \u0441\u043e\u0437\u0434\u0430\u043d\u043d\u044b\u0445 \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432.","title":"\u041f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21163"},{"location":"practice3/#_1","text":"add_oblects - \u0437\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u043c\u0438 import os import django os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'django_project_babichev.settings') django.setup() from datetime import date from project_first_app.models import * # Owners first_names = ['Alice', 'John', 'Robert', 'Emily', 'Michael', 'Olivia'] last_names = ['Smith', 'Johnson', 'Williams', 'Jones', 'Brown', 'Davis'] birthdays = [date(1990, 5, 15), date(1985, 9, 10), date(1978, 4, 25), date(1992, 8, 5), date(1980, 1, 20), date(1995, 3, 12)] # Licences numbers = ['1111111111', '2222222222', '3333333333', '4444444444', '5555555555', '6666666666'] types = ['A', 'B', 'C', 'B', 'A', 'D'] dates = [date(2010, 1, 1), date(2012, 1, 1), date(2015, 1, 1), date(2018, 1, 1), date(2020, 1, 1), date(2022, 1, 1)] # Cars plates = ['ABC123', 'DEF456', 'GHI789', 'JKL012', 'MNO345', 'PQR678'] brands = ['Ford', 'Chevrolet', 'Toyota', 'Honda', 'Nissan', 'BMW'] models = ['Focus', 'Cruze', 'Corolla', 'Civic', 'Sentra', 'X5'] colors = ['Silver', 'Black', 'Red', 'Blue', 'White', 'Gray'] # Ownerships dfrom = [date(2010, 6, 1), date(2012, 4, 1), date(2015, 8, 1), date(2018, 2, 1), date(2020, 10, 1), date(2022, 3, 1)] duntil = [date(2011, 7, 1), date(2013, 6, 1), date(2016, 9, 11), date(2019, 3, 1), date(2021, 11, 1), date(2023, 4, 1)] for (fn, ln, b, n, t, d, p, br, m, c, df, du) in zip(first_names, last_names, birthdays, numbers, types, dates, plates, brands, models, colors, dfrom, duntil): o = Owner(first_name=fn, last_name=ln, birthday=b) o.save() l = License(owner=o, number=n, type=t, issue_date=d) l.save() c = Car(license_plate=p, brand=br, model=m, color=c) c.save() os = Ownership(owner=o, car=c, date_from=df, date_until=du) os.save() filter_obj_t2 - \u0437\u0430\u0434\u0430\u043d\u0438\u0435 2 import os import django os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'django_project_babichev.settings') django.setup() from datetime import date from project_first_app.models import * # All Toyotas toyotas = Car.objects.filter(brand='Toyota') print(\"All Toyota cars\") for t in toyotas: print(t.license_plate, t.brand, t.model, t.color) print() # All owners named John js = Owner.objects.filter(first_name='John') print(\"All owners named John\") for j in js: print(j.first_name, j.last_name) print() # Olivia Davis's license olivia = Owner.objects.get(first_name='Olivia').id license = License.objects.get(owner__id=olivia) print(\"Olivia Davis's license\") print(license.number, license.type, license.issue_date) print() # All owners of a black car blcar = Owner.objects.filter(as_car_owner__car__color='Black') print(\"All owners of a black car\") for b in blcar: print(b.first_name, b.last_name) print() # Ownership started in 2015 or later ownerships = Ownership.objects.filter(date_from__gte=date(2015, 1, 1)) print(\"All owners whose car ownership started in 2015 or later\") for o in ownerships: print(o.owner.first_name, o.owner.last_name, '-', o.car.license_plate, o.car.brand, o.car.model, o.car.color) print() agg_obj_t3.py - \u0437\u0430\u0434\u0430\u043d\u0438\u0435 3 import os import django os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'django_project_babichev.settings') django.setup() from datetime import date from django.db.models import Max, Count from project_first_app.models import * # Oldest license oldest = License.objects.order_by('issue_date')[0] print(\"The oldest license\") print(oldest.issue_date) print() # Latest ownership date max_dates = Ownership.objects.aggregate(Max('date_from'), Max('date_until')).values() print(\"The latest ownership date\") print(max(max_dates)) print() # Car count for all owners car_counter = Owner.objects.annotate(Count(\"owned_cars\")) print(\"Car count for all owners\") for cr in car_counter: print(cr.first_name, cr.last_name, cr.owned_cars__count) print() # Car count for every brand brand_counter = Car.objects.values('brand').annotate(Count('id')) print(\"Car count for every brand\") for bc in brand_counter: print(bc['brand'], bc['id__count']) print() # Owners ordered by license issue date ordered_license = Owner.objects.order_by(\"driver_license__issue_date\") print(\"Owners ordered by license issue date\") for ol in ordered_license: print(ol.first_name, ol.last_name) print()","title":"\u041e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u0444\u0430\u0439\u043b\u044b \u0441 \u043a\u043e\u0434\u043e\u043c"}]}