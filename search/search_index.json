{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"lab1 - task1","title":"Home"},{"location":"#lab1","text":"- task1","title":"lab1"},{"location":"task_1/","text":"\u0417\u0430\u0434\u0430\u0447\u0430 \u21161 \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0443\u044e \u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u043e\u0442\u0441\u044b\u043b\u0430\u0435\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u201cHello, server\u201d. \u0421\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u043e\u0442\u0440\u0430\u0437\u0438\u0442\u044c\u0441\u044f \u043d\u0430 \u0441\u0435\u0440\u0432\u0435\u0440\u0435. \u0421\u0435\u0440\u0432\u0435\u0440 \u0432 \u043e\u0442\u0432\u0435\u0442 \u043e\u0442\u0441\u044b\u043b\u0430\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u00abHello, client\u00bb. \u0421\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u043e\u0442\u043e\u0431\u0440\u0430\u0437\u0438\u0442\u044c\u0441\u044f \u0443 \u043a\u043b\u0438\u0435\u043d\u0442\u0430. \u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 socket. \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b\u0430 UDP. \u0420\u0435\u0448\u0435\u043d\u0438\u0435 \u0421\u0435\u0440\u0432\u0435\u0440 import socket server_socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM) server_address = ('localhost', 12345) server_socket.bind(server_address) print('\u0421\u0435\u0440\u0432\u0435\u0440 \u0437\u0430\u043f\u0443\u0449\u0435\u043d \u0438 \u043e\u0436\u0438\u0434\u0430\u0435\u0442 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u043e\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0430...') while True: data, client_address = server_socket.recvfrom(1024) message = data.decode('utf-8') print('\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u043e \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u043e\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0430:', message) response = 'Hello, client' server_socket.sendto(response.encode('utf-8'), client_address) \u041a\u043b\u0438\u0435\u043d\u0442 import socket client_socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM) server_address = ('localhost', 12345) message = 'Hello, server' client_socket.sendto(message.encode('utf-8'), server_address) response, _ = client_socket.recvfrom(1024) response_message = response.decode('utf-8') print('\u041f\u043e\u043b\u0443\u0447\u0435\u043d \u043e\u0442\u0432\u0435\u0442 \u043e\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u0430:', response_message) client_socket.close() \u041f\u0440\u0438\u043c\u0435\u0440 \u0440\u0430\u0431\u043e\u0442\u044b \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u0421\u0435\u0440\u0432\u0435\u0440\u043d\u0430\u044f \u0447\u0430\u0441\u0442\u044c \u041a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0430\u044f \u0447\u0430\u0441\u0442\u044c","title":"Task 1"},{"location":"task_1/#no1","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0443\u044e \u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u043e\u0442\u0441\u044b\u043b\u0430\u0435\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u201cHello, server\u201d. \u0421\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u043e\u0442\u0440\u0430\u0437\u0438\u0442\u044c\u0441\u044f \u043d\u0430 \u0441\u0435\u0440\u0432\u0435\u0440\u0435. \u0421\u0435\u0440\u0432\u0435\u0440 \u0432 \u043e\u0442\u0432\u0435\u0442 \u043e\u0442\u0441\u044b\u043b\u0430\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u00abHello, client\u00bb. \u0421\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u043e\u0442\u043e\u0431\u0440\u0430\u0437\u0438\u0442\u044c\u0441\u044f \u0443 \u043a\u043b\u0438\u0435\u043d\u0442\u0430. \u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 socket. \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b\u0430 UDP.","title":"\u0417\u0430\u0434\u0430\u0447\u0430 \u21161"},{"location":"task_1/#_1","text":"\u0421\u0435\u0440\u0432\u0435\u0440 import socket server_socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM) server_address = ('localhost', 12345) server_socket.bind(server_address) print('\u0421\u0435\u0440\u0432\u0435\u0440 \u0437\u0430\u043f\u0443\u0449\u0435\u043d \u0438 \u043e\u0436\u0438\u0434\u0430\u0435\u0442 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u043e\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0430...') while True: data, client_address = server_socket.recvfrom(1024) message = data.decode('utf-8') print('\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u043e \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u043e\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0430:', message) response = 'Hello, client' server_socket.sendto(response.encode('utf-8'), client_address) \u041a\u043b\u0438\u0435\u043d\u0442 import socket client_socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM) server_address = ('localhost', 12345) message = 'Hello, server' client_socket.sendto(message.encode('utf-8'), server_address) response, _ = client_socket.recvfrom(1024) response_message = response.decode('utf-8') print('\u041f\u043e\u043b\u0443\u0447\u0435\u043d \u043e\u0442\u0432\u0435\u0442 \u043e\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u0430:', response_message) client_socket.close()","title":"\u0420\u0435\u0448\u0435\u043d\u0438\u0435"},{"location":"task_1/#_2","text":"\u0421\u0435\u0440\u0432\u0435\u0440\u043d\u0430\u044f \u0447\u0430\u0441\u0442\u044c \u041a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0430\u044f \u0447\u0430\u0441\u0442\u044c","title":"\u041f\u0440\u0438\u043c\u0435\u0440 \u0440\u0430\u0431\u043e\u0442\u044b \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b"},{"location":"task_2/","text":"\u0417\u0430\u0434\u0430\u0447\u0430 \u21162 \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0443\u044e \u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u0437\u0430\u043f\u0440\u0430\u0448\u0438\u0432\u0430\u0435\u0442 \u0443 \u0441\u0435\u0440\u0432\u0435\u0440\u0430 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043c\u0430\u0442\u0435\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438, \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u0432\u0432\u043e\u0434\u044f\u0442\u0441\u044f \u0441 \u043a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440\u044b. \u0421\u0435\u0440\u0432\u0435\u0440 \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443. \u041c\u043e\u0439 \u0432\u0430\u0440\u0438\u0430\u043d\u0442, \u0441\u043e\u0433\u043b\u0430\u0441\u043d\u043e \u0441\u043f\u0438\u0441\u043a\u0443 \u0433\u0440\u0443\u043f\u043f\u044b, \u2013 \u0442\u0435\u043e\u0440\u0435\u043c\u0430 \u041f\u0438\u0444\u0430\u0433\u043e\u0440\u0430. \u0420\u0435\u0448\u0435\u043d\u0438\u0435 \u0421\u0435\u0440\u0432\u0435\u0440 import socket server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM) server_address = ('localhost', 12345) server_socket.bind(server_address) server_socket.listen(1) print('\u0421\u0435\u0440\u0432\u0435\u0440 \u0437\u0430\u043f\u0443\u0449\u0435\u043d \u0438 \u043e\u0436\u0438\u0434\u0430\u0435\u0442 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u043a\u043b\u0438\u0435\u043d\u0442\u0430...') while True: client_socket, client_address = server_socket.accept() print('\u041f\u043e\u0434\u043a\u043b\u044e\u0447\u0438\u043b\u0441\u044f \u043a\u043b\u0438\u0435\u043d\u0442:', client_address) base = float(client_socket.recv(1024).decode('utf-8')) height = float(client_socket.recv(1024).decode('utf-8')) area = base * height client_socket.send(str(area).encode('utf-8')) client_socket.close() \u041a\u043b\u0438\u0435\u043d\u0442 import socket client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM) server_address = ('localhost', 12345) client_socket.connect(server_address) print('\u041f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u043e \u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0443:', server_address) base = float(input('\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043e\u0441\u043d\u043e\u0432\u0430\u043d\u0438\u044f: ')) height = float(input('\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0432\u044b\u0441\u043e\u0442\u044b: ')) if base < 0 or height < 0: print('\u0412\u044b\u0441\u043e\u0442\u0430 \u0438 \u0434\u043b\u0438\u043d\u0430 \u043d\u0435 \u043c\u043e\u0433\u0443\u0442 \u0431\u044b\u0442\u044c \u043e\u0442\u0440\u0438\u0446\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u043c\u0438.') client_socket.close() exit() client_socket.send(str(base).encode('utf-8')) client_socket.send(str(height).encode('utf-8')) result = client_socket.recv(1024).decode('utf-8') print('\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438:', result) client_socket.close() \u0414\u0435\u043c\u043e\u043d\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u041a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0430\u044f \u0447\u0430\u0441\u0442\u044c \u041a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0430\u044f \u0447\u0430\u0441\u0442\u044c","title":"Task 2"},{"location":"task_2/#no2","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0443\u044e \u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u0437\u0430\u043f\u0440\u0430\u0448\u0438\u0432\u0430\u0435\u0442 \u0443 \u0441\u0435\u0440\u0432\u0435\u0440\u0430 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043c\u0430\u0442\u0435\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438, \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u0432\u0432\u043e\u0434\u044f\u0442\u0441\u044f \u0441 \u043a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440\u044b. \u0421\u0435\u0440\u0432\u0435\u0440 \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443. \u041c\u043e\u0439 \u0432\u0430\u0440\u0438\u0430\u043d\u0442, \u0441\u043e\u0433\u043b\u0430\u0441\u043d\u043e \u0441\u043f\u0438\u0441\u043a\u0443 \u0433\u0440\u0443\u043f\u043f\u044b, \u2013 \u0442\u0435\u043e\u0440\u0435\u043c\u0430 \u041f\u0438\u0444\u0430\u0433\u043e\u0440\u0430.","title":"\u0417\u0430\u0434\u0430\u0447\u0430 \u21162"},{"location":"task_2/#_1","text":"\u0421\u0435\u0440\u0432\u0435\u0440 import socket server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM) server_address = ('localhost', 12345) server_socket.bind(server_address) server_socket.listen(1) print('\u0421\u0435\u0440\u0432\u0435\u0440 \u0437\u0430\u043f\u0443\u0449\u0435\u043d \u0438 \u043e\u0436\u0438\u0434\u0430\u0435\u0442 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u043a\u043b\u0438\u0435\u043d\u0442\u0430...') while True: client_socket, client_address = server_socket.accept() print('\u041f\u043e\u0434\u043a\u043b\u044e\u0447\u0438\u043b\u0441\u044f \u043a\u043b\u0438\u0435\u043d\u0442:', client_address) base = float(client_socket.recv(1024).decode('utf-8')) height = float(client_socket.recv(1024).decode('utf-8')) area = base * height client_socket.send(str(area).encode('utf-8')) client_socket.close() \u041a\u043b\u0438\u0435\u043d\u0442 import socket client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM) server_address = ('localhost', 12345) client_socket.connect(server_address) print('\u041f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u043e \u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0443:', server_address) base = float(input('\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043e\u0441\u043d\u043e\u0432\u0430\u043d\u0438\u044f: ')) height = float(input('\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0432\u044b\u0441\u043e\u0442\u044b: ')) if base < 0 or height < 0: print('\u0412\u044b\u0441\u043e\u0442\u0430 \u0438 \u0434\u043b\u0438\u043d\u0430 \u043d\u0435 \u043c\u043e\u0433\u0443\u0442 \u0431\u044b\u0442\u044c \u043e\u0442\u0440\u0438\u0446\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u043c\u0438.') client_socket.close() exit() client_socket.send(str(base).encode('utf-8')) client_socket.send(str(height).encode('utf-8')) result = client_socket.recv(1024).decode('utf-8') print('\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438:', result) client_socket.close()","title":"\u0420\u0435\u0448\u0435\u043d\u0438\u0435"},{"location":"task_2/#_2","text":"\u041a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0430\u044f \u0447\u0430\u0441\u0442\u044c \u041a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0430\u044f \u0447\u0430\u0441\u0442\u044c","title":"\u0414\u0435\u043c\u043e\u043d\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u0440\u0430\u0431\u043e\u0442\u044b"},{"location":"task_3/","text":"\u0417\u0430\u0434\u0430\u0447\u0430 \u21163 \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0430\u0435\u0442\u0441\u044f \u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0443. \u0412 \u043e\u0442\u0432\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 http-\u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0435\u0435 html-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443, \u043a\u043e\u0442\u043e\u0440\u0443\u044e \u0441\u0435\u0440\u0432\u0435\u0440 \u043f\u043e\u0434\u0433\u0440\u0443\u0436\u0430\u0435\u0442 \u0438\u0437 \u0444\u0430\u0439\u043b\u0430 index.html. \u0420\u0435\u0448\u0435\u043d\u0438\u0435 \u0421\u0435\u0440\u0432\u0435\u0440 import socket server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM) server_address = ('localhost', 80) server_socket.bind(server_address) server_socket.listen(1) print('\u0421\u0435\u0440\u0432\u0435\u0440 \u0437\u0430\u043f\u0443\u0449\u0435\u043d \u0438 \u043e\u0436\u0438\u0434\u0430\u0435\u0442 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u043a\u043b\u0438\u0435\u043d\u0442\u0430...') while True: client_socket, client_address = server_socket.accept() print('\u041f\u043e\u0434\u043a\u043b\u044e\u0447\u0438\u043b\u0441\u044f \u043a\u043b\u0438\u0435\u043d\u0442:', client_address) with open('index.html', 'r') as file: html_content = file.read() http_response = 'HTTP/1.1 200 OK\\r\\n' http_response += 'Content-Type: text/html\\r\\n' http_response += '\\r\\n' http_response += html_content client_socket.send(http_response.encode('utf-8')) client_socket.close() \u0414\u0435\u043c\u043e\u043d\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u041f\u0440\u0438 \u043f\u0435\u0440\u0435\u0445\u043e\u0434\u0435 \u043f\u043e \u043d\u0443\u0436\u043d\u043e\u043c\u0443 \u0441\u043e\u043a\u0435\u0442\u0443 \u0432 \u0431\u0440\u0430\u0443\u0437\u0435\u0440\u0435 \u0432\u0438\u0434\u0438\u043c html","title":"Task 3"},{"location":"task_3/#no3","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0430\u0435\u0442\u0441\u044f \u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0443. \u0412 \u043e\u0442\u0432\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 http-\u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0435\u0435 html-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443, \u043a\u043e\u0442\u043e\u0440\u0443\u044e \u0441\u0435\u0440\u0432\u0435\u0440 \u043f\u043e\u0434\u0433\u0440\u0443\u0436\u0430\u0435\u0442 \u0438\u0437 \u0444\u0430\u0439\u043b\u0430 index.html.","title":"\u0417\u0430\u0434\u0430\u0447\u0430 \u21163"},{"location":"task_3/#_1","text":"\u0421\u0435\u0440\u0432\u0435\u0440 import socket server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM) server_address = ('localhost', 80) server_socket.bind(server_address) server_socket.listen(1) print('\u0421\u0435\u0440\u0432\u0435\u0440 \u0437\u0430\u043f\u0443\u0449\u0435\u043d \u0438 \u043e\u0436\u0438\u0434\u0430\u0435\u0442 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u043a\u043b\u0438\u0435\u043d\u0442\u0430...') while True: client_socket, client_address = server_socket.accept() print('\u041f\u043e\u0434\u043a\u043b\u044e\u0447\u0438\u043b\u0441\u044f \u043a\u043b\u0438\u0435\u043d\u0442:', client_address) with open('index.html', 'r') as file: html_content = file.read() http_response = 'HTTP/1.1 200 OK\\r\\n' http_response += 'Content-Type: text/html\\r\\n' http_response += '\\r\\n' http_response += html_content client_socket.send(http_response.encode('utf-8')) client_socket.close()","title":"\u0420\u0435\u0448\u0435\u043d\u0438\u0435"},{"location":"task_3/#_2","text":"\u041f\u0440\u0438 \u043f\u0435\u0440\u0435\u0445\u043e\u0434\u0435 \u043f\u043e \u043d\u0443\u0436\u043d\u043e\u043c\u0443 \u0441\u043e\u043a\u0435\u0442\u0443 \u0432 \u0431\u0440\u0430\u0443\u0437\u0435\u0440\u0435 \u0432\u0438\u0434\u0438\u043c html","title":"\u0414\u0435\u043c\u043e\u043d\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u0440\u0430\u0431\u043e\u0442\u044b"},{"location":"task_4/","text":"\u0417\u0430\u0434\u0430\u0447\u0430 \u21163 \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0434\u0432\u0443\u0445\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0438\u043b\u0438 \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0447\u0430\u0442. \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0433\u043e \u0447\u0430\u0442\u0430 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0431\u0430\u043b\u043b\u043e\u0432. \u0420\u0435\u0448\u0435\u043d\u0438\u0435 \u0421\u0435\u0440\u0432\u0435\u0440 import threading import socket def handle_client(client_socket, client_name): while True: try: message = client_socket.recv(1024).decode('utf-8') if message: print(f'{client_name}: {message}') broadcast_message(client_name, message) except: print(f'\u041f\u043e\u0442\u0435\u0440\u044f\u043d\u043e \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0435 \u0441 \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u043c {client_name}') client_socket.close() break def broadcast_message(sender_name, message): for client_socket, name in CLIENTS: if name != sender_name: try: client_socket.send(f'{sender_name}: {message}'.encode('utf-8')) except: print(f'\u041e\u0448\u0438\u0431\u043a\u0430 \u043f\u0440\u0438 \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u043a\u043b\u0438\u0435\u043d\u0442\u0443 {name}') client_socket.close() remove_client(client_socket, name) def remove_client(client_socket, client_name): for client in CLIENTS: if client[0] == client_socket and client[1] == client_name: CLIENTS.remove(client) break def start_server(): server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM) server_socket.bind(('localhost', 12345)) server_socket.listen(5) print('\u0421\u0435\u0440\u0432\u0435\u0440 \u0437\u0430\u043f\u0443\u0449\u0435\u043d. \u041e\u0436\u0438\u0434\u0430\u043d\u0438\u0435 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0439...') while True: client_socket, client_address = server_socket.accept() print(f'\u0423\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d\u043e \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0435 \u0441 \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u043c {client_address}') client_name = client_socket.recv(1024).decode('utf-8') print(f'\u041a\u043b\u0438\u0435\u043d\u0442 {client_name} \u043f\u0440\u0438\u0441\u043e\u0435\u0434\u0438\u043d\u0438\u043b\u0441\u044f') CLIENTS.append((client_socket, client_name)) client_thread = threading.Thread(target=handle_client, args=(client_socket, client_name)) client_thread.start() CLIENTS = [] server_thread = threading.Thread(target=start_server) server_thread.start() \u041a\u043b\u0438\u0435\u043d\u0442 import threading import socket def handle_server(server_socket): while True: try: message = server_socket.recv(1024).decode('utf-8') if message: print('\\n' + message) except: print('\u041f\u043e\u0442\u0435\u0440\u044f\u043d\u043e \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0435 \u0441 \u0441\u0435\u0440\u0432\u0435\u0440\u043e\u043c') server_socket.close() break def start_client(): client_name = input('\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u0432\u0430\u0448\u0435 \u0438\u043c\u044f: ') client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM) client_socket.connect(('localhost', 12345)) client_socket.send(client_name.encode('utf-8')) client_thread = threading.Thread(target=handle_server, args=(client_socket,)) client_thread.start() while True: message = input() client_socket.send(message.encode('utf-8')) client_thread = threading.Thread(target=start_client) client_thread.start() \u0414\u0435\u043c\u043e\u043d\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0417\u0430\u043f\u0443\u0441\u043a server.py: \u042e\u0437\u0435\u0440 1 \u042e\u0437\u0435\u0440 2 \u042e\u0437\u0435\u0440 3","title":"Task 4"},{"location":"task_4/#no3","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0434\u0432\u0443\u0445\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0438\u043b\u0438 \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0447\u0430\u0442. \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0433\u043e \u0447\u0430\u0442\u0430 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0431\u0430\u043b\u043b\u043e\u0432.","title":"\u0417\u0430\u0434\u0430\u0447\u0430 \u21163"},{"location":"task_4/#_1","text":"\u0421\u0435\u0440\u0432\u0435\u0440 import threading import socket def handle_client(client_socket, client_name): while True: try: message = client_socket.recv(1024).decode('utf-8') if message: print(f'{client_name}: {message}') broadcast_message(client_name, message) except: print(f'\u041f\u043e\u0442\u0435\u0440\u044f\u043d\u043e \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0435 \u0441 \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u043c {client_name}') client_socket.close() break def broadcast_message(sender_name, message): for client_socket, name in CLIENTS: if name != sender_name: try: client_socket.send(f'{sender_name}: {message}'.encode('utf-8')) except: print(f'\u041e\u0448\u0438\u0431\u043a\u0430 \u043f\u0440\u0438 \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u043a\u043b\u0438\u0435\u043d\u0442\u0443 {name}') client_socket.close() remove_client(client_socket, name) def remove_client(client_socket, client_name): for client in CLIENTS: if client[0] == client_socket and client[1] == client_name: CLIENTS.remove(client) break def start_server(): server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM) server_socket.bind(('localhost', 12345)) server_socket.listen(5) print('\u0421\u0435\u0440\u0432\u0435\u0440 \u0437\u0430\u043f\u0443\u0449\u0435\u043d. \u041e\u0436\u0438\u0434\u0430\u043d\u0438\u0435 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0439...') while True: client_socket, client_address = server_socket.accept() print(f'\u0423\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d\u043e \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0435 \u0441 \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u043c {client_address}') client_name = client_socket.recv(1024).decode('utf-8') print(f'\u041a\u043b\u0438\u0435\u043d\u0442 {client_name} \u043f\u0440\u0438\u0441\u043e\u0435\u0434\u0438\u043d\u0438\u043b\u0441\u044f') CLIENTS.append((client_socket, client_name)) client_thread = threading.Thread(target=handle_client, args=(client_socket, client_name)) client_thread.start() CLIENTS = [] server_thread = threading.Thread(target=start_server) server_thread.start() \u041a\u043b\u0438\u0435\u043d\u0442 import threading import socket def handle_server(server_socket): while True: try: message = server_socket.recv(1024).decode('utf-8') if message: print('\\n' + message) except: print('\u041f\u043e\u0442\u0435\u0440\u044f\u043d\u043e \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0435 \u0441 \u0441\u0435\u0440\u0432\u0435\u0440\u043e\u043c') server_socket.close() break def start_client(): client_name = input('\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u0432\u0430\u0448\u0435 \u0438\u043c\u044f: ') client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM) client_socket.connect(('localhost', 12345)) client_socket.send(client_name.encode('utf-8')) client_thread = threading.Thread(target=handle_server, args=(client_socket,)) client_thread.start() while True: message = input() client_socket.send(message.encode('utf-8')) client_thread = threading.Thread(target=start_client) client_thread.start()","title":"\u0420\u0435\u0448\u0435\u043d\u0438\u0435"},{"location":"task_4/#_2","text":"\u0417\u0430\u043f\u0443\u0441\u043a server.py: \u042e\u0437\u0435\u0440 1 \u042e\u0437\u0435\u0440 2 \u042e\u0437\u0435\u0440 3","title":"\u0414\u0435\u043c\u043e\u043d\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u0440\u0430\u0431\u043e\u0442\u044b"},{"location":"task_5/","text":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u21165 \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u043f\u0440\u043e\u0441\u0442\u043e\u0439 web-\u0441\u0435\u0440\u0432\u0435\u0440 \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 GET \u0438 POST http \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Python \u0438 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 socket. \u0420\u0435\u0448\u0435\u043d\u0438\u0435 web-server import socket class WebServer: def __init__(self, host, port): self.host = host self.port = port self.data = {} # \u0421\u043b\u043e\u0432\u0430\u0440\u044c \u0434\u043b\u044f \u0445\u0440\u0430\u043d\u0435\u043d\u0438\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0435 \u0438 \u043e\u0446\u0435\u043d\u043a\u0435 def start(self): server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM) server_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1) server_socket.bind((self.host, self.port)) server_socket.listen(1) print(f\"Server is running at http://{self.host}:{self.port}/\") while True: client_socket, client_address = server_socket.accept() request = client_socket.recv(1024).decode() if request: response = self.handle_request(request) client_socket.sendall(response.encode()) client_socket.close() def handle_request(self, request): headers = request.split(\"\\r\\n\") method, path, version = headers[0].split(\" \") if method == \"GET\": if path == \"/\": return self.get_homepage() elif path.startswith(\"/grades/\"): discipline = path.split(\"/\")[2] return self.get_grades(discipline) elif method == \"POST\": if path == \"/add\": return self.handle_add_request(headers[-1]) return self.not_found() def get_homepage(self): content = \"<h1>Grades by Discipline</h1>\" if self.data: content += \"<ul>\" for discipline, grade in self.data.items(): content += f\"<li><a href='/grades/{discipline}'>{discipline}</a></li>\" content += \"</ul>\" else: content += \"<p>No information about grades available</p>\" response = \"HTTP/1.1 200 OK\\r\\n\" response += \"Content-Type: text/html\\r\\n\" response += \"Connection: close\\r\\n\" response += f\"Content-Length: {len(content)}\\r\\n\" response += \"\\r\\n\" response += content return response def get_grades(self, discipline): content = \"<h1>Grades for Discipline: {}</h1>\".format(discipline) if discipline in self.data: grade = self.data[discipline] content += \"<p>Grade: {}</p>\".format(grade) else: content += \"<p>No information available for the specified discipline</p>\" response = \"HTTP/1.1 200 OK\\r\\n\" response += \"Content-Type: text/html\\r\\n\" response += \"Connection: close\\r\\n\" response += f\"Content-Length: {len(content)}\\r\\n\" response += \"\\r\\n\" response += content return response def handle_add_request(self, data): data = data.split(\"&\") discipline = data[0].split(\"=\")[1] grade = data[1].split(\"=\")[1] self.data[discipline] = grade return self.get_homepage() def not_found(self): response = \"HTTP/1.1 404 Not Found\\r\\n\" response += \"Content-Type: text/plain\\r\\n\" response += \"Connection: close\\r\\n\" response += \"Content-Length: 9\\r\\n\" response += \"\\r\\n\" response += \"Not Found\" return response if __name__ == \"__main__\": server = WebServer(\"127.0.0.3\", 8080) server.start() \u0414\u0435\u043c\u043e\u043d\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0417\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u043c \u0441\u0435\u0440\u0432\u0435\u0440 \u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443 \u0414\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u043c \u043f\u0440\u0435\u0434\u043c\u0435\u0442 \u0438 \u043e\u0446\u0435\u043d\u043a\u0443 \u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c","title":"Task 5"},{"location":"task_5/#no5","text":"\u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u043f\u0440\u043e\u0441\u0442\u043e\u0439 web-\u0441\u0435\u0440\u0432\u0435\u0440 \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 GET \u0438 POST http \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Python \u0438 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 socket.","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u21165"},{"location":"task_5/#_1","text":"web-server import socket class WebServer: def __init__(self, host, port): self.host = host self.port = port self.data = {} # \u0421\u043b\u043e\u0432\u0430\u0440\u044c \u0434\u043b\u044f \u0445\u0440\u0430\u043d\u0435\u043d\u0438\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0435 \u0438 \u043e\u0446\u0435\u043d\u043a\u0435 def start(self): server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM) server_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1) server_socket.bind((self.host, self.port)) server_socket.listen(1) print(f\"Server is running at http://{self.host}:{self.port}/\") while True: client_socket, client_address = server_socket.accept() request = client_socket.recv(1024).decode() if request: response = self.handle_request(request) client_socket.sendall(response.encode()) client_socket.close() def handle_request(self, request): headers = request.split(\"\\r\\n\") method, path, version = headers[0].split(\" \") if method == \"GET\": if path == \"/\": return self.get_homepage() elif path.startswith(\"/grades/\"): discipline = path.split(\"/\")[2] return self.get_grades(discipline) elif method == \"POST\": if path == \"/add\": return self.handle_add_request(headers[-1]) return self.not_found() def get_homepage(self): content = \"<h1>Grades by Discipline</h1>\" if self.data: content += \"<ul>\" for discipline, grade in self.data.items(): content += f\"<li><a href='/grades/{discipline}'>{discipline}</a></li>\" content += \"</ul>\" else: content += \"<p>No information about grades available</p>\" response = \"HTTP/1.1 200 OK\\r\\n\" response += \"Content-Type: text/html\\r\\n\" response += \"Connection: close\\r\\n\" response += f\"Content-Length: {len(content)}\\r\\n\" response += \"\\r\\n\" response += content return response def get_grades(self, discipline): content = \"<h1>Grades for Discipline: {}</h1>\".format(discipline) if discipline in self.data: grade = self.data[discipline] content += \"<p>Grade: {}</p>\".format(grade) else: content += \"<p>No information available for the specified discipline</p>\" response = \"HTTP/1.1 200 OK\\r\\n\" response += \"Content-Type: text/html\\r\\n\" response += \"Connection: close\\r\\n\" response += f\"Content-Length: {len(content)}\\r\\n\" response += \"\\r\\n\" response += content return response def handle_add_request(self, data): data = data.split(\"&\") discipline = data[0].split(\"=\")[1] grade = data[1].split(\"=\")[1] self.data[discipline] = grade return self.get_homepage() def not_found(self): response = \"HTTP/1.1 404 Not Found\\r\\n\" response += \"Content-Type: text/plain\\r\\n\" response += \"Connection: close\\r\\n\" response += \"Content-Length: 9\\r\\n\" response += \"\\r\\n\" response += \"Not Found\" return response if __name__ == \"__main__\": server = WebServer(\"127.0.0.3\", 8080) server.start()","title":"\u0420\u0435\u0448\u0435\u043d\u0438\u0435"},{"location":"task_5/#_2","text":"\u0417\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u043c \u0441\u0435\u0440\u0432\u0435\u0440 \u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443 \u0414\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u043c \u043f\u0440\u0435\u0434\u043c\u0435\u0442 \u0438 \u043e\u0446\u0435\u043d\u043a\u0443 \u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c","title":"\u0414\u0435\u043c\u043e\u043d\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u0440\u0430\u0431\u043e\u0442\u044b"}]}